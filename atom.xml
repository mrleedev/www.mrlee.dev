<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>kamelåså</title>
    <link href="https://www.kamelasa.dev/atom.xml" rel="self" />
    <link href="https://www.kamelasa.dev" />
    <id>https://www.kamelasa.dev/atom.xml</id>
    <author>
        <name>Lee Meichin</name>
        <email>www@mrlee.dev</email>
    </author>
    <updated>2021-01-24T00:00:00Z</updated>
    <entry>
    <title>Things I've learned after 10 years in the industry</title>
    <link href="https://www.kamelasa.dev/programming/things-ive-changed-my-mind-on" />
    <id>https://www.kamelasa.dev/programming/things-ive-changed-my-mind-on</id>
    <published>2021-01-24T00:00:00Z</published>
    <updated>2021-01-24T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
    <header class="header inverse-video">
        <h2 class="title">Things I've learned after 10 years in the industry</h2>
        <span class="ert">~3 min. read</span>
    </header>

    <section>
        <p>Earlier today I read a blog post titled <em>Software development topics I’ve changed my mind on after 6 years in the industry</em><a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a> and it made me reflect on how my own thinking has (hopefully) evolved over my decade long career. I’m not going to discuss the content of the linked post, except to say that as much as I empathise with the author and have been an angry programmer myself, the overly aggressive tone that occasionally slips out isn’t really my cup of tea.</p>
<p>A lot of things can happen in ten years, and if nothing else my 30-something year old self feels substantially less enlightened than his more youthful counterpart. I look forward to reading this again in future and seeing what I think about it then.</p>
<p>This will probably come across as a bunch of hot takes that work better on Twitter, but that’s one dumpster fire I’d prefer not to climb into. So here we go, in no particular order…</p>
<ul>
<li><p>I feel happier in myself when I don’t pretend to have an answer to everything.</p>
<p><em>Corrollary: Having an answer to everything (or being overconfident) is a hard habit to break.</em></p></li>
<li><p>A boring tech stack is nice, but you have to allow some scope for innovation if you don’t want to stagnate.</p>
<p><em>One idea is to set up an innovation budget<a href="#fn2" class="footnote-ref" id="fnref2" role="doc-noteref"><sup>2</sup></a>, but it’s not the only one.</em></p></li>
<li><p>PHP is a legitimate–if not <em>superior</em>–option to start a new project with and it deserves another chance.</p>
<p><em>The language has matured spectacularly since 7.1 onwards.</em></p></li>
<li><p>It’s up to me as a software engineer to research ideas and proposals and judge them on merit, not anecdata.</p>
<p><em>I used to find things like Domain Driven Design (DDD) silly and enterprisey, because I used a poor implementation of it to judge the process itself.</em></p></li>
<li><p>The cloud is not a foregone conclusion.</p>
<p><em>You can still get a lot more bang for your buck with a VPS, and you’ll learn something about systems administration too.</em></p></li>
<li><p>QA is only a bottleneck when you treat the team as part of a deployment pipeline.</p>
<p><em>So many issues can be fixed at the design phase, before a line of code is even written, if you involve your QA engineers.</em></p></li>
<li><p>Not every people problem can be solved with technology.</p>
<p><em>Automate everything away and you have no humanity left.</em></p></li>
<li><p>My greatest learning moments came from maintenance programming and working with legacy code, rather than building new features.</p>
<p><em>Debugging is a skill, fixing bugs is a skill, and the depth of your domain knowledge will be limited if you don’t know how to do it well.</em></p></li>
<li><p>When talking about User Experience, your users aren’t just your paying customers, they’re your support team and your developers.</p>
<p><em>Dedicating some resources to internal productivity can do wonders for your team, which eventually leads to increased user satisfaction.</em></p></li>
<li><p>Technology isn’t invalidated by its age, it is strengthened by it.</p>
<p><em>I occasionally hear people saying things like people don’t use Rails any more because it’s old and serverless or some shit is the hype. Don’t use hype as the foundation for your business, use stability.</em></p></li>
<li><p>You can write much better code if you don’t micro-manage the structure of it; be judicious with your linters and formatters.</p>
<p><em>Setting limits on things like function length or class length sounds ideal, but these kind of linters are ultimately shaping your code through blunt force and, possibly more often than not, making it worse by enforcing needless indirection.</em></p></li>
<li><p>If it’s in a pull request (PR) it might already be too late to change course.</p>
<p><em>The sort of feedback you can give in a pull request is not of the same quality you can get with a conversation held before committing code.</em></p></li>
<li><p>It’s better when I’m not sentimental about the code I write or the ideas I present.</p>
<p><em>Rejection isn’t always so easy to handle, but there’s always another time and a ‘no’ is still better than not being acknowledged at all. It’s a great opportunity for constructive feedback and learning.</em></p></li>
</ul>
<p>It feels a bit weird to write out a series of arbitrary maxims the way I just have, so I’ll aim to explore each one in more depth throughout this year. With that said, it was an interesting exercise if ultimately a rather shallow one. Watch this space for more details.</p>
<section class="footnotes" role="doc-endnotes">
<hr />
<ol>
<li id="fn1" role="doc-endnote"><p><a href="https://chriskiehl.com/article/thoughts-after-6-years" class="uri">https://chriskiehl.com/article/thoughts-after-6-years</a><a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn2" role="doc-endnote"><p><a href="https://mcfunley.com/choose-boring-technology" class="uri">https://mcfunley.com/choose-boring-technology</a><a href="#fnref2" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>
    </section>
</article>]]></summary>
</entry>
<entry>
    <title>Using Ruby's C API inside Ruby</title>
    <link href="https://www.kamelasa.dev/programming/using-ruby-c-in-ruby" />
    <id>https://www.kamelasa.dev/programming/using-ruby-c-in-ruby</id>
    <published>2021-01-18T00:00:00Z</published>
    <updated>2021-01-18T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
    <header class="header inverse-video">
        <h2 class="title">Using Ruby's C API inside Ruby</h2>
        <span class="ert">~4 min. read</span>
    </header>

    <section>
        <p>A thought occurred to me in my mask-wearing, lockdown-addled brain last night: why the hell did I choose <em>now</em> to stop drinking? It’s for my own good, I told myself, and so my thoughts shifted further into the absurd with nary a mind-altering substance in sight to stop them.</p>
<p>One of those thoughts stuck out in particular, because of how ridiculous it sounded: could you optimise your Ruby code by using FFI with Ruby’s C bindings? I’m not talking about making a native extension in pure C, I’m talking about making Ruby talk to itself through a foreign function interface using the ffi gem<a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a>.</p>
<p>Let’s apply some method to this madness and set up some bindings, otherwise we’re dead in the water. Let’s be descriptive and call our FFI module <code>LibRuby</code>. No naming conflicts at all there, <em>no sirree</em>!</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode ruby"><code class="sourceCode ruby"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true"></a>require <span class="st">&#39;ffi&#39;</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true"></a></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true"></a><span class="kw">module</span> <span class="dt">LibRuby</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true"></a>  extend <span class="dt">FFI</span>::<span class="dt">Library</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true"></a></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true"></a>  ffi_lib <span class="st">&#39;ruby&#39;</span></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true"></a></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true"></a>  typedef <span class="st">:pointer</span>, <span class="st">:value</span></span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true"></a>  typedef <span class="st">:pointer</span>, <span class="st">:id</span></span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true"></a></span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true"></a>  attach_variable <span class="st">:rb_mKernel</span>, <span class="st">:value</span></span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true"></a>  attach_function <span class="st">:rb_const_get</span>, [<span class="st">:value</span>, <span class="st">:id</span>], <span class="st">:value</span></span>
<span id="cb1-13"><a href="#cb1-13" aria-hidden="true"></a>  attach_function <span class="st">:rb_intern</span>, [<span class="st">:string</span>], <span class="st">:id</span></span>
<span id="cb1-14"><a href="#cb1-14" aria-hidden="true"></a>  attach_function <span class="st">:rb_funcall</span>, [<span class="st">:value</span>, <span class="st">:id</span>, <span class="st">:int</span>, <span class="st">:varargs</span>], <span class="st">:value</span></span>
<span id="cb1-15"><a href="#cb1-15" aria-hidden="true"></a>  attach_function <span class="st">:rb_str_new_cstr</span>, [<span class="st">:string</span>], <span class="st">:value</span></span>
<span id="cb1-16"><a href="#cb1-16" aria-hidden="true"></a><span class="kw">end</span></span></code></pre></div>
<p>If you look at the code in this module, you’ll notice that I used <code>attach_variable</code> to get access to the Kernel module, and <code>attach_function</code> for the method calls. The <code>:id</code> and <code>:value</code> types are just aliases for <code>:pointer</code>, because <code>VALUE</code> and <code>ID</code> in the C API are themselves pointers. It’s for the sake of documentation, so it’s clearer what order you pass arguments in.</p>
<p>Ruby’s built in modules and classes are already defined globally with a naming scheme. In this case, <code>Kernel</code> is a variable called <code>rb_mKernel</code>, where <code>rb</code> is a prefix that every C function has in common (so you know it’s for Ruby as C doesn’t have namespaces), and the letter <code>m</code> means <code>module</code>. If it was <code>c</code> instead it would mean <code>class</code>.</p>
<p>Anyway this boilerplate should give us enough to do a hello world using Ruby’s C API but at runtime, in Ruby, so it’s time to fire up <code>irb</code>.</p>
<aside>
It should go without saying that at this point, you’re not just playing with fire, you’re inviting it to burn down your house. Be careful lest the <code>segfault</code>s creep up on you.
</aside>
<p>Let’s take it from the top and talk through this ungodly incantation. Go ahead and copy that little module into your console! If it fails, make sure you’ve got the <code>ffi</code> gem installed<a href="#fn2" class="footnote-ref" id="fnref2" role="doc-noteref"><sup>2</sup></a>.</p>
<p>Once you’re done, you can save some keystrokes by importing that module.</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode ruby"><code class="sourceCode ruby"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true"></a>include <span class="dt">LibRuby</span></span></code></pre></div>
<p>In order to call <code>puts</code> in Ruby through the C API, we’ll need to get a reference to the module it’s defined in (<code>Kernel</code>), and also get the method name as a symbol (like you might normally do with <code>.to_sym</code>).</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode ruby"><code class="sourceCode ruby"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true"></a>kernel = <span class="dt">LibRuby</span>.rb_mKernel</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true"></a>puts_method = rb_intern(<span class="st">&#39;puts&#39;</span>)</span></code></pre></div>
<p>Oh, before we continue, better disable the garbage collector. This is a simple way to stop the oscillating turbine from splattering unpleasant substances around the room. (More on that later, but see if you can guess why.)</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode ruby"><code class="sourceCode ruby"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true"></a><span class="dt">GC</span>.disable</span></code></pre></div>
<p>We can’t just pass in a normal string to <code>puts</code> without things going 💥, as everything is an object in Ruby and therefore we need to get a pointer to a <code>String</code> instance (or in internal Ruby lingo, one of those <code>VALUE</code>s).</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode ruby"><code class="sourceCode ruby"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true"></a>str = rb_str_new_cstr(<span class="st">&#39;welcome, mortals&#39;</span>)</span></code></pre></div>
<p>Now we have all of the ingredients to make the actual call, which syntactically and aesthetically blows idiomatic Ruby out of the water. Delicately paste this into your console and you should see the string printed out. You’ll also get a return value like <code>#&lt;FFI::Pointer address=0x0000000000000008&gt;</code>, which will refer to <code>Qnil</code>. <code>Qnil</code> is a pointer to Ruby’s <code>nil</code> object.</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode ruby"><code class="sourceCode ruby"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true"></a>rb_funcall(kernel, puts_method, <span class="dv">1</span>, <span class="st">:value</span>, str)</span></code></pre></div>
<p>Run it again a few times, and with different strings. If you’re feeling experimental, attach more functions in <code>LibRuby</code> and see what else you can print out! Ruby’s extension documentation should be a good place to start<a href="#fn3" class="footnote-ref" id="fnref3" role="doc-noteref"><sup>3</sup></a>.</p>
<h3 id="so-why-disable-the-gc">So, why disable the GC?</h3>
<p>For every step in this post up to creating a <code>String</code> object, we’ve been using function bindings and global variables. Global variables and constants won’t be garbage collected, because the global scope will always maintain a reference to them; besides which, it would be quite bad if your classes and modules suddenly disappeared after a GC pass.</p>
<p>The string object is different, however, as on the C side of things Ruby is taking a pointer to a C string (a <code>const char *</code>), allocating memory, and giving back a pointer to the new object. Eventually the GC will run and free up the memory at the pointer’s address, and the string will no longer exist. You’ll probably find something else at that address instead, or just garbage.</p>
<p>Disabling the GC in this instance is a <strong>shitty hack</strong> because it’s a direct admission that the code is <em>not memory safe</em>. Hopefully you didn’t need me to tell you that, though, and the quality of the code in this post was self-evident.</p>
<p>How would you fix it? Well, now we’ve found out that we <em>can</em> write Ruby with itself we’ll explore that next time. And there’ll be benchmarks, too.</p>
<p>Until then, I’ll see you further into the abyss.</p>
<section class="footnotes" role="doc-endnotes">
<hr />
<ol>
<li id="fn1" role="doc-endnote"><p><a href="https://github.com/ffi/ffi" class="uri">https://github.com/ffi/ffi</a><a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn2" role="doc-endnote"><p><code>gem install ffi -- --enable-system-libffi</code><a href="#fnref2" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn3" role="doc-endnote"><p><a href="https://ruby-doc.org/core-2.7.0/doc/extension_rdoc.html" class="uri">https://ruby-doc.org/core-2.7.0/doc/extension_rdoc.html</a><a href="#fnref3" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>
    </section>
</article>]]></summary>
</entry>
<entry>
    <title>Gettin' Ziggy With It On The Pi Zero</title>
    <link href="https://www.kamelasa.dev/programming/gettin-ziggy-with-it-pi-zero" />
    <id>https://www.kamelasa.dev/programming/gettin-ziggy-with-it-pi-zero</id>
    <published>2021-01-05T00:00:00Z</published>
    <updated>2021-01-05T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
    <header class="header inverse-video">
        <h2 class="title">Gettin' Ziggy With It On The Pi Zero</h2>
        <span class="ert">~10 min. read</span>
    </header>

    <section>
        <p>Alright, you can read the article first and shoot me later for a title like that, and what will inevitably become a series of Zig-based puns.</p>
<p>Zig, for the unaware, is a fancy language that looks to be to C what Rust is to C++. Honestly, I recommend you read the summary on the main page<a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a> to find out more yourself, as the best I can do is to just parrot what has already been written. However, you can see it as a valid <em>alternative</em> to C and Zig itself has claimed that it wants to be a better version of C than C itself. An ambitious challenge, for sure. To that end, Zig itself ships its own C compiler.</p>
<p>I’ve been interested in giving Zig a spin for quite a while, and once my Raspberry Pi Zero W<a href="#fn2" class="footnote-ref" id="fnref2" role="doc-noteref"><sup>2</sup></a> and OLED display<a href="#fn3" class="footnote-ref" id="fnref3" role="doc-noteref"><sup>3</sup></a> arrived in the post, I decided that this would be my best opportunity to try it out. I’m not really going to cover the process of wiring up the hardware, suffice to say that once you’ve got your Pi Zero you’ll need to be able to SSH into it, and that you’ll need a [solderless] GPIO header<a href="#fn4" class="footnote-ref" id="fnref4" role="doc-noteref"><sup>4</sup></a> to plug the OLED display into. I recommend the Zero <strong>W</strong> because the W means ‘WiFi’, which means that if you connect it to your network you can SSH in without faffing around with USB cables and what not. It’s not a requirement, though.</p>
<p>With that out of the way, let’s see if we can write something in Zig to power this little display. It’s going to be a simple program that simply fills the entire screen by turning the pixels from black (off) to white (on). As an extra challenge, we will do this without pulling in dependencies like WiringPi<a href="#fn5" class="footnote-ref" id="fnref5" role="doc-noteref"><sup>5</sup></a>, or relying on existing drivers, as lovely as they are.</p>
<p>Instead, we will be directly using the i<sup>2</sup>c dev interface<a href="#fn6" class="footnote-ref" id="fnref6" role="doc-noteref"><sup>6</sup></a>. If you’re using Debian and/or Ubuntu on your Pi and your own machine, you can grab these libraries with a simple <code>sudo apt install i2c-dev</code>. You will need to enable i<sup>2</sup>c on your Pi separately though, through <code>sudo raspi-config</code><a href="#fn7" class="footnote-ref" id="fnref7" role="doc-noteref"><sup>7</sup></a>.</p>
<p>Ready to… get Ziggy with it? Oh, I bet you are. 😋 If you want to skip to the end and just grab the code, though, you can find this all on GitHub<a href="#fn8" class="footnote-ref" id="fnref8" role="doc-noteref"><sup>8</sup></a>. I called it Stardust, like <em>Zig</em>gy Stardust. Get it?</p>
<p>🥁</p>
<hr />
<h2 id="hello-pi.">Hello, Pi.</h2>
<p>The first and most complicated part of any low-level project is the bit where you try and establish a build system of some sorts. We’re going to forget about that completely for now and apply some elbow-grease to the situation.</p>
<p>The next step is to define a <code>main</code> function that grabs a file descriptor (or handle) corresponding to our OLED display. According to the aforementioned dev interface docs, we’ll need to open a file and check it with <code>ioctl</code>.</p>
<pre class="zig"><code>const std = @import(&quot;std&quot;);

const c = @cImport({
  @cInclude(&quot;linux/i2c.h&quot;);
  @cInclude(&quot;linux/i2c-dev.h&quot;);
  @cInclude(&quot;sys/ioctl.h&quot;);
});

const i2c_device = &quot;/dev/i2c-1&quot;; // this is assumed correct on a Pi Zero, but may be i2c-0 on an older Pi.
const i2c_addr: c_int = 0x3c; // this is typed as a C-style int for ABI compatibility with C

pub fn main() !void {
  const stdout = std.io.getStdOut().outStream();

  const fd = try fs.openFileAbsolute(i2c_device, fs.File.OpenFlags{ .write = true, .read = true });
  defer fd.close();

  if (c.ioctl(fd.handle, c.I2C_SLAVE, i2c_addr) &lt; 0)) {
    try stdout.print(&quot;ioctl failed, errno: {}\n&quot;, c.errno);
  }

  stdout.print(&quot;Init successful.\n&quot;, .{});
}</code></pre>
<p>You might have noticed something odd: we’re not really writing much Zig here, it’s practically 95% interop with C. The beauty of Zig is that this interop is so simple and intuitive that it’s the <em>easiest</em> way to get started if you’re going to be linking against existing C libraries. Get the software working first, abstract it later, as they say, and you might already start to get an idea of what we could convert into idiomatic Zig libraries in future.</p>
<p>The actual Zig code you see though, is quite different to the C stuff. That <code>defer fd.close()</code>, for example, <em>ensures</em> that the file descriptor we opened up will be closed when we’re done. If we don’t do that, then it’ll stay open and there’ll be a leak.</p>
<p>There’s also the <code>try</code> macro, used in combination with the <code>!void</code> return type, which will be super familiar if you’ve written some Rust and have dealt with option types. It’s short hand for executing the code and catching/dealing with the error, with <code>!void</code> being another shorthand for <code>anyerror!void</code>, namely: this function returns either nothing, or an error if there is one.</p>
<p>WHat we’ve actually done, however, is open the device file <code>/dev/i2c-1</code>, and then used the <code>ioctl</code> library to specify which device in particular we want to talk to. You can find out this value by running <code>i2cdevice -y 1</code>, like so:</p>
<pre><code>pi@raspberrypi:~ $ i2cdetect -y 1
     0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f
00:          -- -- -- -- -- -- -- -- -- -- -- -- --
10: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
20: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
30: -- -- -- -- -- -- -- -- -- -- -- -- 3c -- -- --
40: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
50: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
60: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
70: -- -- -- -- -- -- -- --</code></pre>
<aside>
In my case, the device can be accessed at address <code>0x3C</code>, which is how I defined <code>i2c_addr</code> above.
</aside>
<p>We’re at a good point now to try and compile this thing and then run it on the Pi. If we get the message ‘Init successful.’ then we’re golden.</p>
<hr />
<h2 id="build-and-push">Build and Push</h2>
<p>Zig comes with a nice little build system out of the box, but we’re not going to use it right now because it’s a work in progress. I’ll leave that as an exercise to you, the reader, and I urge you to contribute any documentation you come up with to Zig. Instead, we’ll use the CLI which is just as powerful and, gracefully, a bit more discoverable for our purposes.</p>
<p>Are you writing this code on the Pi itself? Probably not, I imagine, and nor do you need to.</p>
<blockquote>
<p>Cross-compiling is a first-class use case</p>
<p>Andrew Kelley, Creator of Zig</p>
</blockquote>
<p>Let’s build a binary, then. Save your code into a file, say, <code>stardust.zig</code> and then proceed.</p>
<pre class="console"><code>zig build-exe stardust.zig  -target arm-linux-musleabihf -mcpu arm1176jzf_s -O ReleaseSafe -lc</code></pre>
<p>To unpack that a little, the <code>target</code> is a triplet stating that we want to build this using the musl<a href="#fn9" class="footnote-ref" id="fnref9" role="doc-noteref"><sup>9</sup></a> libc ABI, on a 32bit ARM architecture. <code>mcpu</code> goes along with that to make sure the resulting binary will work on our Pi Zero. I grabbed these values from an issue on Zig’s github repo<a href="#fn10" class="footnote-ref" id="fnref10" role="doc-noteref"><sup>10</sup></a>, so credit goes to the author of that issue for unintentionally guiding me forward.</p>
<p>Passing the optimiser flag (<code>-O</code>) isn’t strictly necessary, so you can omit this if you require a debug build and stack traces with errors.</p>
<p><code>-lc</code> basically says that this binary needs to be linked against libc.</p>
<p>Once the build finishes, you should find a shiny new executable called <code>stardust</code> in the same directory as your code. You can get it onto your Pi with <code>scp</code>, like so:</p>
<pre class="console"><code>scp stardust pi@raspberrypi:~/stardust</code></pre>
<aside>
You will need to change <code>pi@raspberrypi</code> to whatever else you’ve configured if you’ve changed the defaults.
</aside>
<p>SSH into your Pi after that, and try and run it! Does it return successfully? I hope so!</p>
<p>Let’s move on and make this kitten purr. Meow 🐈.</p>
<hr />
<h2 id="getting-this-show-on-the-road">Getting this show on the road</h2>
<p>In true <em>draw the rest of the fucking owl</em> fashion<a href="#fn11" class="footnote-ref" id="fnref11" role="doc-noteref"><sup>11</sup></a>, what follows is a bit of a code-dump since the primary method of communicating with your OLED display is to, literally, write a few bytes to a file. The registers available and what can be written to them are often described in a meticulously detailed datasheet<a href="#fn12" class="footnote-ref" id="fnref12" role="doc-noteref"><sup>12</sup></a>, but they’re not exactly light reading and we can save a bit of time by grabbing the info from elsewhere. A lot of the constants that follow are gracefully derived from those listed in a certain <code>owenosborn</code>’s wiringPi-based driver.<a href="#fn13" class="footnote-ref" id="fnref13" role="doc-noteref"><sup>13</sup></a>. Credit where credit’s due, eh.</p>
<pre class="zig"><code>const SET_CONTRAST = 0x81;
const SET_DISPLAY_ALL_ON_RESUME = 0xA4;
const SET_DISPLAY_ALL_ON = 0xA5;
const SET_NORMAL_DISPLAY = 0xA6;
const SET_INVERT_DISPLAY = 0xA7;
const SET_DISPLAY_OFF = 0xAE;
const SET_DISPLAY_ON = 0xAF;
const SET_DISPLAY_OFFSET = 0xD3;
const SET_COLUMN_ADDR = 0x21;
const SET_PAGE_ADDR = 0x22;
const SET_COM_PINS = 0xDA;
const SET_VCOM_DETECT = 0xDB;
const SET_DISPLAY_CLOCK_FREQ = 0xD5;
const SET_PRECHARGE = 0xD9;
const SET_MULTIPLEX_RATIO = 0xA8;
const SET_LOW_COLUMN = 0x00;
const SET_HIGH_COLUMN = 0x10;
const SET_START_LINE = 0x40;
const SET_START_PAGE = 0xB0;
const SET_MEMORY_MODE = 0x20;
const SET_COM_SCAN_INC = 0xC0;
const SET_COM_SCAN_DEC = 0xC8;
const SET_SEG_REMAP = 0xA0;
const SET_CHARGE_PUMP = 0x8D;</code></pre>
<p>The registers available to an i<sup>2</sup>c compatible device will depend on the device itself, so it’s not really safe to copy and paste these without knowing exactly what you’re dealing with. This is driver level code so it’s not like you’ll get some fancy validation error if you write the wrong bytes, you’ll more likely fuck it up and burn down your house<a href="#fn14" class="footnote-ref" id="fnref14" role="doc-noteref"><sup>14</sup></a>.</p>
<p>Next we’ll want to init the display and get it into a clean state, with the cursor pointing at the first pixel.</p>
<pre class="zig"><code>fn init_display(fd: fs.File) !void {
    const cmds = [_]u8{
        SET_MULTIPLEX_RATIO, 0x3F,                   0x00,
        SET_START_LINE,      SET_SEG_REMAP,          SET_COM_SCAN_DEC,
        SET_COM_PINS,        0x32,                   SET_DISPLAY_ALL_ON_RESUME,
        SET_NORMAL_DISPLAY,  SET_DISPLAY_CLOCK_FREQ, 0x80,
        SET_CHARGE_PUMP,     0x14,                   SET_MEMORY_MODE,
        0x20,
    };

    inline for (cmds) |cmd| {
        _ = try fd.write(&amp;[2]u8{ 0x00, cmd });
    }
}

fn display_off(fd: fs.File) !void {
    _ = try fd.write(&amp;[2]u8{ 0x00, SET_DISPLAY_OFF });
}

fn display_on(fd: fs.File) !void {
    _ = try fd.write(&amp;[2]u8{ 0x00, SET_DISPLAY_ON });
}

fn reset_cursor(fd: fs.File) !void {
    const cmds = [_]u8{
        SET_COLUMN_ADDR,
        0x00,
        0x7F,
        SET_PAGE_ADDR,
        0x00,
        0x07,
    };

    inline for (cmds) |cmd| {
        _ = try fd.write(&amp;[2]u8{ 0x00, cmd });
    }
}</code></pre>
<p>Wow, actual Zig code! The formatting may look a little odd because that’s what <code>zig fmt</code> decides is appropriate.</p>
<p><code>init_display</code> is quite a complex beast that issues a whole series of commands that sets up the display for further use. A more detailed explanation of that will be in another post, for the sake of brevity, but in essence it was adapted from AdaFruit’s CircuitPi driver, written in Python<a href="#fn15" class="footnote-ref" id="fnref15" role="doc-noteref"><sup>15</sup></a>.</p>
<p>The recurring theme in all of these new functions is that the entire basis of their existence is to create an array of two bytes, and then write them to file descriptor we opened right at the start. The data structure looks something like this:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true"></a>buf[<span class="dv">0</span>] = <span class="bn">0x00</span>; <span class="co">// the register to be written to</span></span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true"></a>buf[<span class="dv">1</span>] = <span class="er">0x</span>??; <span class="co">// the value to assign to that register</span></span></code></pre></div>
<p>The file opened in <code>main</code> isn’t a traditional file as you know it, but it points to all of the devices connected to your GPIO header on the Pi. Therefore, if you know enough about the hardware at a low enough level, you can control all of them by writing the right bytes to the right register, at the right address.</p>
<p>The rest of the code, e.g. <code>reset_cursor</code>, resets the state of the display in such a way that you can write a pixel and the cursor will advance, linearly, to the next one.</p>
<pre class="zig"><code>fn fill(fd: fs.File) !void {
    var i: usize = 0;

    while (i &lt; 1024) {
        _ = try fd.write(&amp;[2]u8{ 0x40, 0xFF });
        i += 1;
    }
}</code></pre>
<p>This <code>fill</code> function will (rather quickly) turn the display solid white, updating each pixel one at a time. Before we continue though, let’s go through some more Zig specifics; namely, <code>inline</code>.</p>
<hr />
<h2 id="a-zig-a-zig-aaaahhhh">A zig-a-Zig aaaahhhh…</h2>
<aside>
Reach out to me at <a href="mailto:pleasemakeitstop@mrlee.dev">pleasemakeitstop@mrlee.dev</a> if this is too much for you.
</aside>
<p>Zig has some nice language features intended to replace and improve upon C/C++ preprocessor macros. The <code>inline</code> keyword is one such thing, and when applied to a <code>for</code> or <code>while</code> loop it’ll unroll it at compile time. A simple optimisation but a useful one. We don’t use it, but you also have <code>comptime</code>, which is powerful enough to be able to implement generics, if you so desire. We’re not going to go into that here though, and you can read more about it from a certain Loris Cro<a href="#fn16" class="footnote-ref" id="fnref16" role="doc-noteref"><sup>16</sup></a>.</p>
<hr />
<p>This post is getting pretty long-winded, and all I wanted to do was show how to set some pixels on a tiny display. Let’s wrap this up then, since we’re almost ready to recompile. Just one finishing touch, which is to call the functions we defined. Update <code>main</code> to look like this:</p>
<pre class="zig"><code>pub fn main() !void {
    const stdout = std.io.getStdOut().outStream();
    const fd = try fs.openFileAbsolute(i2c_device, fs.File.OpenFlags{ .write = true, .read = true });
    defer fd.close();

    if (c.ioctl(fd.handle, c.I2C_SLAVE, i2c_addr) &lt; 0) {
        try stdout.print(&quot;ioctl failed, errno: {}\n&quot;, c.errno);
        return;
    }

    try stdout.print(&quot;init\n&quot;, .{});
    try display_off(fd);
    try init_display(fd);
    try display_on(fd);
    try reset_cursor(fd);

    try stdout.print(&quot;turn on\n&quot;, .{});
    try display_on(fd);

    try stdout.print(&quot;fill\n&quot;, .{});
    try fill(fd);
}</code></pre>
<p>Once you’re done, rebuild the binary and <code>scp</code> it over, like you did the first time. SSH into your Pi and run it again (i.e <code>./stardust</code>), and see your display light up! 🥳</p>
<hr />
<p>Hopefully that worked, but if it didn’t, get in touch with your feedback at <a href="mailto:wtf@mrlee.dev">wtf@mrlee.dev</a> and help contribute to this post being a better, more informative read. After all, <em>works on my machine!</em> can only go so far.</p>
<pre><code></code></pre>
<section class="footnotes" role="doc-endnotes">
<hr />
<ol>
<li id="fn1" role="doc-endnote"><p><a href="https://ziglang.org" class="uri">https://ziglang.org</a><a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn2" role="doc-endnote"><p><a href="https://thepihut.com/products/raspberry-pi-zero-w" class="uri">https://thepihut.com/products/raspberry-pi-zero-w</a><a href="#fnref2" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn3" role="doc-endnote"><p><a href="https://thepihut.com/products/adafruit-pioled-128x32-monochrome-oled-add-on-for-raspberry-pi-ada3527" class="uri">https://thepihut.com/products/adafruit-pioled-128x32-monochrome-oled-add-on-for-raspberry-pi-ada3527</a><a href="#fnref3" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn4" role="doc-endnote"><p><a href="https://thepihut.com/products/gpio-hammer-header-solderless" class="uri">https://thepihut.com/products/gpio-hammer-header-solderless</a><a href="#fnref4" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn5" role="doc-endnote"><p><a href="http://wiringpi.com/" class="uri">http://wiringpi.com/</a><a href="#fnref5" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn6" role="doc-endnote"><p><a href="https://www.kernel.org/doc/Documentation/i2c/dev-interface" class="uri">https://www.kernel.org/doc/Documentation/i2c/dev-interface</a><a href="#fnref6" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn7" role="doc-endnote"><p><a href="https://learn.adafruit.com/adafruits-raspberry-pi-lesson-4-gpio-setup/configuring-i2c" class="uri">https://learn.adafruit.com/adafruits-raspberry-pi-lesson-4-gpio-setup/configuring-i2c</a><a href="#fnref7" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn8" role="doc-endnote"><p><a href="https://github.com/mrleedev/stardust" class="uri">https://github.com/mrleedev/stardust</a><a href="#fnref8" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn9" role="doc-endnote"><p><a href="https://musl.libc.org/" class="uri">https://musl.libc.org/</a><a href="#fnref9" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn10" role="doc-endnote"><p><a href="https://github.com/ziglang/zig/issues/4875" class="uri">https://github.com/ziglang/zig/issues/4875</a><a href="#fnref10" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn11" role="doc-endnote"><p><a href="https://knowyourmeme.com/memes/how-to-draw-an-owl" class="uri">https://knowyourmeme.com/memes/how-to-draw-an-owl</a><a href="#fnref11" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn12" role="doc-endnote"><p><a href="https://cdn-shop.adafruit.com/datasheets/SSD1306.pdf" class="uri">https://cdn-shop.adafruit.com/datasheets/SSD1306.pdf</a><a href="#fnref12" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn13" role="doc-endnote"><p><a href="https://github.com/owenosborn/SSD1306-OLED-WiringPi/blob/master/ssd1306.h" class="uri">https://github.com/owenosborn/SSD1306-OLED-WiringPi/blob/master/ssd1306.h</a><a href="#fnref13" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn14" role="doc-endnote"><p>Possibly exaggerated for effect. Possibly.<a href="#fnref14" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn15" role="doc-endnote"><p><a href="https://github.com/adafruit/Adafruit_CircuitPython_SSD1306/blob/master/adafruit_ssd1306.py" class="uri">https://github.com/adafruit/Adafruit_CircuitPython_SSD1306/blob/master/adafruit_ssd1306.py</a><a href="#fnref15" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn16" role="doc-endnote"><p><a href="https://kristoff.it/blog/what-is-zig-comptime/" class="uri">https://kristoff.it/blog/what-is-zig-comptime/</a><a href="#fnref16" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>
    </section>
</article>]]></summary>
</entry>
<entry>
    <title>Can you crack the code?</title>
    <link href="https://www.kamelasa.dev/programming/can-you-crack-the-code" />
    <id>https://www.kamelasa.dev/programming/can-you-crack-the-code</id>
    <published>2020-12-31T00:00:00Z</published>
    <updated>2020-12-31T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
    <header class="header inverse-video">
        <h2 class="title">Can you crack the code?</h2>
        <span class="ert">~15 min. read</span>
    </header>

    <section>
        <p>What better way to spend the final moments of 2020, locked down in London, than with a logic puzzle and a computer that can, well, do logic? Join me for a few minutes on this auspicious eve, and learn how you can spend an order of magnitude more time computing a solution than what it would take if you used your noggin instead.</p>
<p>I presume you’ve seen this kind of puzzle before: there is a lock that requires a three or four digit code in order for it to open. You don’t know what the code is, of course, but you’re given a series of clues that will test your powers of deduction and lead you to the right answer. I’ve actually got such a puzzle here:</p>
<hr />
<div style="text-align: center">
<p><strong>CAN YOU CRACK THE CODE?</strong></p>
<p>🔐 _ _ _ _</p>
<p><strong>9</strong> <strong>2</strong> <strong>8</strong> <strong>5</strong><br />
One number is correct, but in the wrong place.</p>
<p><strong>1</strong> <strong>9</strong> <strong>3</strong> <strong>7</strong><br />
Two numbers are correct, but in the wrong place.</p>
<p><strong>5</strong> <strong>2</strong> <strong>0</strong> <strong>1</strong><br />
One number is correct, and is in the right place.</p>
<p><strong>6</strong> <strong>5</strong> <strong>0</strong> <strong>7</strong><br />
None of the numbers are correct, in any place.</p>
<p><strong>8</strong> <strong>5</strong> <strong>0</strong> <strong>4</strong><br />
Two numbers are correct, but in the wrong place.</p>
</div>
<hr />
<h2 id="a-brief-introduction">A brief introduction</h2>
<p>If you’re unaware of Prolog, it’s a <em>logical progamming</em> language that, in its most simplest terms, takes a bunch of facts and rules and then gives you the tools to query them to get the outcome you want. In more complicated terms, a cursory search on the intertubes will lead you to a vast collection of academic papers that explain more. This is not the kind of language that is casually blogged about by the masses, as with more mainstream ones like CSS, HTML, or ColdFusion.</p>
<blockquote>
<p>Programming in Prolog is significantly different from conventional procedural programming and requires a readjustment in the way one things about programming. Logical relationships are asserted, and Prolog is used to determine whether or not certain statements are true, and if true, what variable bindings make them true. This leads to a very declarative style of programming.</p>
<p>Dennis Merritt, <em>Adventure in Prolog</em>, 2017<a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a>.</p>
</blockquote>
<p>Mr Merritt is, to put it professionally, <strong>god damn right</strong>. Here’s a valid Prolog program:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode prolog"><code class="sourceCode prolog"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true"></a><span class="co">% https://swish.swi-prolog.org/p/KfdGtcJr.swinb</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true"></a></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true"></a>president(trump)<span class="kw">.</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true"></a>president(obama)<span class="kw">.</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true"></a>president(brie)<span class="kw">.</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true"></a></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true"></a>cheese(brie)<span class="kw">.</span></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true"></a>cheese(wensleydale)<span class="kw">.</span></span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true"></a>person(trump)<span class="kw">.</span></span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true"></a>person(obama)<span class="kw">.</span></span></code></pre></div>
<p>What we have here are some facts, both true and technically true. It’s a fact that Obama is a president, as is Trump. It’s also a fact that there is a brand of cheese in the UK called President. This is quite ambiguous as a result so some extra facts are supplied, namely that brie is a cheese as much as it is a President-brand cheese, and that Wensleydale is also a cheese. It goes without saying that Trump and Obama are people, so with those facts we should be able to do some querying.</p>
<p>If you’re doing this on your own machine, you can save those facts into a file (say, <code>example.pl</code>) and then importing it inside a console, like so: <code>[example].</code>. Otherwise, you can load up the Swish notebook<a href="#fn2" class="footnote-ref" id="fnref2" role="doc-noteref"><sup>2</sup></a> and follow along using an online console, no installation needed!</p>
<p>Let’s do some querying then, which will show you how Prolog might seem a bit back to front compared to what you’re used to.</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode prolog"><code class="sourceCode prolog"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true"></a>president(trump)<span class="kw">.</span> <span class="co">% true.</span></span></code></pre></div>
<p>So far, so boring. We stated <code>president(trump)</code> as a fact in our first prolog file, so this is basically confirming that we did so. Let’s spice it up a little.</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode prolog"><code class="sourceCode prolog"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true"></a>president(<span class="dt">X</span>)<span class="kw">.</span> <span class="co">% trump; obama; brie.</span></span></code></pre></div>
<aside>
With the online editor you can click ‘Next’ to see all of the results, and in the console you can type <code>;</code>. This can be done repeatedly until the input ends with <code>.</code>, which says there are no more facts that fit the query)
</aside>
<p>The fuck? What is <code>X</code>?</p>
<p><code>X</code> is a variable, or a placeholder if you like. Any word starting with a capital letter is a variable, and when you pass one in a query Prolog will supply the results of the query to those variables. In this case, we’re essentially saying <code>who are all the presidents? I don't know their names so put them all in X for me</code>.</p>
<p>Let’s try one more thing, which should explain enough about Prolog to be dangerous.</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode prolog"><code class="sourceCode prolog"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true"></a>president(<span class="dt">X</span>)<span class="kw">,</span> cheese(<span class="dt">X</span>)<span class="kw">.</span> <span class="co">% brie.</span></span></code></pre></div>
<p><em>Now we’re cookin’ wi’ gas!</em> as we’d say back up north. A lot of what you do in prolog is chain little sentences like this together (using the comma operator <code>,</code>, which means <code>and</code>), and in this instance we’re asking Prolog to get all the presidents, put them in X, and then show me only the presidents that are also a cheese. The <code>.</code> finishes the sentence, or the query. Let’s do a similar query to wrap this intro up, and you can see if your guess at the answer is the same as what this produces.</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode prolog"><code class="sourceCode prolog"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true"></a>president(<span class="dt">X</span>)<span class="kw">,</span> person(<span class="dt">X</span>)<span class="kw">.</span> <span class="co">% trump, obama.</span></span></code></pre></div>
<p>This is more or less the essence of Prolog, and your program is essentially a database of facts and rules, and then you use the program by querying those facts and rules. You’ll make a query by providing what you <em>do</em> know, and then placing a variable (or a placeholder) in the spots where you don’t know the answer. You don’t tell Prolog how exactly to compute that answer. And with that explained, I think we can try and crack this code.</p>
<h2 id="doing-some-l33t-haxx0ring">Doing some l33t haxx0ring</h2>
<p>Here’s the puzzle again, for reference:</p>
<hr />
<div style="text-align: center">
<p><strong>CAN YOU CRACK THE CODE?</strong></p>
<p>🔐 _ _ _ _</p>
<p><strong>9</strong> <strong>2</strong> <strong>8</strong> <strong>5</strong><br />
One number is correct, but in the wrong place.</p>
<p><strong>1</strong> <strong>9</strong> <strong>3</strong> <strong>7</strong><br />
Two numbers are correct, but in the wrong place.</p>
<p><strong>5</strong> <strong>2</strong> <strong>0</strong> <strong>1</strong><br />
One number is correct, and is in the right place.</p>
<p><strong>6</strong> <strong>5</strong> <strong>0</strong> <strong>7</strong><br />
None of the numbers are correct, in any place.</p>
<p><strong>8</strong> <strong>5</strong> <strong>0</strong> <strong>4</strong><br />
Two numbers are correct, but in the wrong place.</p>
</div>
<hr />
<p>According to Leon Sterling and Ehud Shapiro in <em>The Art of Prolog</em><a href="#fn3" class="footnote-ref" id="fnref3" role="doc-noteref"><sup>3</sup></a>, this type of problem falls quite neatly under the umbrella of non-deterministic programming. This is because we’re essentially going to build an algorithm that will use what they describe as a <code>generate and test</code> solution. We’re going to write something that will take our clues and run through all the possible answers until it lands on the only one that fits. We’re not aiming for beautiful optimisation here so this good enough, although the code we write will be tightly coupled to the exact puzzle provided.</p>
<p>So, let’s begin with our set of rules:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode prolog"><code class="sourceCode prolog"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true"></a><span class="kw">:-</span> use_module(library(clpfd))<span class="kw">.</span> <span class="co">% we&#39;re working with numbers, this makes it easier.</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true"></a></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true"></a>clue_1([<span class="dv">9</span>, <span class="dv">2</span>, <span class="dv">8</span>, <span class="dv">5</span>])<span class="kw">.</span> <span class="co">% one number correct, but in the wrong place</span></span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true"></a>clue_2([<span class="dv">1</span>, <span class="dv">9</span>, <span class="dv">3</span>, <span class="dv">7</span>])<span class="kw">.</span> <span class="co">% two numbers are correct, but in the wrong place</span></span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true"></a>clue_3([<span class="dv">5</span>, <span class="dv">2</span>, <span class="dv">0</span>, <span class="dv">1</span>])<span class="kw">.</span> <span class="co">% one number is correct, and is also in the right place</span></span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true"></a>clue_4([<span class="dv">6</span>, <span class="dv">5</span>, <span class="dv">0</span>, <span class="dv">7</span>])<span class="kw">.</span> <span class="co">% none of the numbers are correct, anywhere</span></span>
<span id="cb6-7"><a href="#cb6-7" aria-hidden="true"></a>clue_5([<span class="dv">8</span>, <span class="dv">5</span>, <span class="dv">2</span>, <span class="dv">4</span>])<span class="kw">.</span> <span class="co">% two numbers are correct, but in the wrong place</span></span></code></pre></div>
<aside>
If you’re curious about the first <code>use_module</code> statement, beyond knowing that it makes things easier, check out the docs on <em>Constraint Logic Programming over Finite Domains</em><a href="#fn4" class="footnote-ref" id="fnref4" role="doc-noteref"><sup>4</sup></a>.
</aside>
<p>These clues don’t really mean anything by themselves, they’re simple facts in Prolog terms, so we need to add a bit more to give these some meaning. All of this will go into the same file, as we’re not ready to query yet.</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode prolog"><code class="sourceCode prolog"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true"></a><span class="co">% rule: a digit is correct but it is in the wrong place</span></span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true"></a>wrong_place(<span class="dt">Digit</span><span class="kw">,</span> <span class="dt">Index</span><span class="kw">,</span> <span class="dt">Digits</span>) <span class="kw">:-</span> nth1(<span class="dt">Index1</span><span class="kw">,</span> <span class="dt">Digits</span><span class="kw">,</span> <span class="dt">Digit</span>)<span class="kw">,</span> <span class="dt">Index</span> <span class="fu">\==</span> <span class="dt">Index1</span><span class="kw">.</span></span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true"></a></span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true"></a><span class="co">% rule: a digit is correct and it is in the right place</span></span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true"></a>right_place(<span class="dt">Digit</span><span class="kw">,</span> <span class="dt">Index</span><span class="kw">,</span> <span class="dt">Digits</span>) <span class="kw">:-</span> nth1(<span class="dt">Index</span><span class="kw">,</span> <span class="dt">Digits</span><span class="kw">,</span> <span class="dt">Digit</span>)<span class="kw">.</span></span>
<span id="cb7-6"><a href="#cb7-6" aria-hidden="true"></a></span>
<span id="cb7-7"><a href="#cb7-7" aria-hidden="true"></a><span class="co">% rule: the digit is wrong.</span></span>
<span id="cb7-8"><a href="#cb7-8" aria-hidden="true"></a>wrong(<span class="dt">_</span><span class="kw">,</span> [])<span class="kw">.</span></span>
<span id="cb7-9"><a href="#cb7-9" aria-hidden="true"></a>wrong(<span class="dt">Digit</span><span class="kw">,</span> [<span class="dt">D</span><span class="fu">|</span><span class="dt">Ds</span>]) <span class="kw">:-</span> <span class="dt">Digit</span> #\= <span class="dt">D</span><span class="kw">,</span> wrong(<span class="dt">Digit</span><span class="kw">,</span> <span class="dt">Ds</span>)<span class="kw">.</span></span></code></pre></div>
<p>I’ll leave the in-depth explanation of these rules to another post for the sake of brevity, and also because I’m not that much of a Prolog expert. These are all used to add meaning to the facts, as with these rules we can now define logic such as <em>one number is correct but in the wrong position</em>, and <em>none of the numbers are correct</em>. We just have to painstakingly mix and match them.</p>
<p>The next bit is quite long, but this query is where we make the sausage. Commentary will be written inline for ease of copy and paste, until I come back and edit this post with a more digestible version.</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode prolog"><code class="sourceCode prolog"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true"></a>crack_code(<span class="dt">Code</span>) <span class="kw">:-</span></span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true"></a>    <span class="co">% A, B, C and D represent the four digits of the code, which are all between 0 and 9.</span></span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true"></a>    <span class="dt">A</span> in <span class="dv">0</span>..<span class="dv">9</span><span class="kw">,</span></span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true"></a>    <span class="dt">B</span> in <span class="dv">0</span>..<span class="dv">9</span><span class="kw">,</span></span>
<span id="cb8-5"><a href="#cb8-5" aria-hidden="true"></a>    <span class="dt">C</span> in <span class="dv">0</span>..<span class="dv">9</span><span class="kw">,</span></span>
<span id="cb8-6"><a href="#cb8-6" aria-hidden="true"></a>    <span class="dt">D</span> in <span class="dv">0</span>..<span class="dv">9</span><span class="kw">,</span></span>
<span id="cb8-7"><a href="#cb8-7" aria-hidden="true"></a></span>
<span id="cb8-8"><a href="#cb8-8" aria-hidden="true"></a>    <span class="co">% &#39;;&#39; means &#39;or&#39;, whereas &#39;,&#39; means &#39;and&#39;</span></span>
<span id="cb8-9"><a href="#cb8-9" aria-hidden="true"></a></span>
<span id="cb8-10"><a href="#cb8-10" aria-hidden="true"></a>    <span class="co">% one digit in D1 is correct, but in the wrong place</span></span>
<span id="cb8-11"><a href="#cb8-11" aria-hidden="true"></a>    <span class="co">% the other three digits must therefore be incorrect</span></span>
<span id="cb8-12"><a href="#cb8-12" aria-hidden="true"></a>    <span class="co">% query this for each digit.</span></span>
<span id="cb8-13"><a href="#cb8-13" aria-hidden="true"></a>    clue_1(<span class="dt">D1</span>)<span class="kw">,</span></span>
<span id="cb8-14"><a href="#cb8-14" aria-hidden="true"></a>    (</span>
<span id="cb8-15"><a href="#cb8-15" aria-hidden="true"></a>        wrong_place(<span class="dt">A</span><span class="kw">,</span> <span class="dv">1</span><span class="kw">,</span> <span class="dt">D1</span>)<span class="kw">,</span> wrong(<span class="dt">B</span><span class="kw">,</span> <span class="dt">D1</span>)<span class="kw">,</span> wrong(<span class="dt">C</span><span class="kw">,</span> <span class="dt">D1</span>)<span class="kw">,</span> wrong(<span class="dt">D</span><span class="kw">,</span> <span class="dt">D1</span>)<span class="kw">;</span></span>
<span id="cb8-16"><a href="#cb8-16" aria-hidden="true"></a>        wrong_place(<span class="dt">B</span><span class="kw">,</span> <span class="dv">2</span><span class="kw">,</span> <span class="dt">D1</span>)<span class="kw">,</span> wrong(<span class="dt">A</span><span class="kw">,</span> <span class="dt">D1</span>)<span class="kw">,</span> wrong(<span class="dt">C</span><span class="kw">,</span> <span class="dt">D1</span>)<span class="kw">,</span> wrong(<span class="dt">D</span><span class="kw">,</span> <span class="dt">D1</span>)<span class="kw">;</span></span>
<span id="cb8-17"><a href="#cb8-17" aria-hidden="true"></a>        wrong_place(<span class="dt">C</span><span class="kw">,</span> <span class="dv">3</span><span class="kw">,</span> <span class="dt">D1</span>)<span class="kw">,</span> wrong(<span class="dt">A</span><span class="kw">,</span> <span class="dt">D1</span>)<span class="kw">,</span> wrong(<span class="dt">B</span><span class="kw">,</span> <span class="dt">D1</span>)<span class="kw">,</span> wrong(<span class="dt">D</span><span class="kw">,</span> <span class="dt">D1</span>)<span class="kw">;</span></span>
<span id="cb8-18"><a href="#cb8-18" aria-hidden="true"></a>        wrong_place(<span class="dt">D</span><span class="kw">,</span> <span class="dv">4</span><span class="kw">,</span> <span class="dt">D1</span>)<span class="kw">,</span> wrong(<span class="dt">A</span><span class="kw">,</span> <span class="dt">D1</span>)<span class="kw">,</span> wrong(<span class="dt">B</span><span class="kw">,</span> <span class="dt">D1</span>)<span class="kw">,</span> wrong(<span class="dt">C</span><span class="kw">,</span> <span class="dt">D1</span>)</span>
<span id="cb8-19"><a href="#cb8-19" aria-hidden="true"></a>    )<span class="kw">,</span></span>
<span id="cb8-20"><a href="#cb8-20" aria-hidden="true"></a></span>
<span id="cb8-21"><a href="#cb8-21" aria-hidden="true"></a>    <span class="co">% two digits are correct this time, and they are both in the wrong place</span></span>
<span id="cb8-22"><a href="#cb8-22" aria-hidden="true"></a>    <span class="co">% exhaustively check every combination where two numbers are correct, and the other two are incorrect.</span></span>
<span id="cb8-23"><a href="#cb8-23" aria-hidden="true"></a>    clue_2(<span class="dt">D2</span>)<span class="kw">,</span></span>
<span id="cb8-24"><a href="#cb8-24" aria-hidden="true"></a>    (</span>
<span id="cb8-25"><a href="#cb8-25" aria-hidden="true"></a>        wrong_place(<span class="dt">A</span><span class="kw">,</span> <span class="dv">1</span><span class="kw">,</span> <span class="dt">D2</span>)<span class="kw">,</span> wrong_place(<span class="dt">B</span><span class="kw">,</span> <span class="dv">2</span><span class="kw">,</span> <span class="dt">D2</span>)<span class="kw">,</span> wrong(<span class="dt">C</span><span class="kw">,</span> <span class="dt">D2</span>)<span class="kw">,</span> wrong(<span class="dt">D</span><span class="kw">,</span> <span class="dt">D2</span>)<span class="kw">;</span></span>
<span id="cb8-26"><a href="#cb8-26" aria-hidden="true"></a>        wrong_place(<span class="dt">A</span><span class="kw">,</span> <span class="dv">1</span><span class="kw">,</span> <span class="dt">D2</span>)<span class="kw">,</span> wrong_place(<span class="dt">C</span><span class="kw">,</span> <span class="dv">3</span><span class="kw">,</span> <span class="dt">D2</span>)<span class="kw">,</span> wrong(<span class="dt">B</span><span class="kw">,</span> <span class="dt">D2</span>)<span class="kw">,</span> wrong(<span class="dt">D</span><span class="kw">,</span> <span class="dt">D2</span>)<span class="kw">;</span></span>
<span id="cb8-27"><a href="#cb8-27" aria-hidden="true"></a>        wrong_place(<span class="dt">A</span><span class="kw">,</span> <span class="dv">1</span><span class="kw">,</span> <span class="dt">D2</span>)<span class="kw">,</span> wrong_place(<span class="dt">D</span><span class="kw">,</span> <span class="dv">4</span><span class="kw">,</span> <span class="dt">D2</span>)<span class="kw">,</span> wrong(<span class="dt">B</span><span class="kw">,</span> <span class="dt">D2</span>)<span class="kw">,</span> wrong(<span class="dt">C</span><span class="kw">,</span> <span class="dt">D2</span>)<span class="kw">;</span></span>
<span id="cb8-28"><a href="#cb8-28" aria-hidden="true"></a></span>
<span id="cb8-29"><a href="#cb8-29" aria-hidden="true"></a>        wrong_place(<span class="dt">B</span><span class="kw">,</span> <span class="dv">2</span><span class="kw">,</span> <span class="dt">D2</span>)<span class="kw">,</span> wrong_place(<span class="dt">A</span><span class="kw">,</span> <span class="dv">1</span><span class="kw">,</span> <span class="dt">D2</span>)<span class="kw">,</span> wrong(<span class="dt">C</span><span class="kw">,</span> <span class="dt">D2</span>)<span class="kw">,</span> wrong(<span class="dt">D</span><span class="kw">,</span> <span class="dt">D2</span>)<span class="kw">;</span></span>
<span id="cb8-30"><a href="#cb8-30" aria-hidden="true"></a>        wrong_place(<span class="dt">B</span><span class="kw">,</span> <span class="dv">2</span><span class="kw">,</span> <span class="dt">D2</span>)<span class="kw">,</span> wrong_place(<span class="dt">C</span><span class="kw">,</span> <span class="dv">3</span><span class="kw">,</span> <span class="dt">D2</span>)<span class="kw">,</span> wrong(<span class="dt">A</span><span class="kw">,</span> <span class="dt">D2</span>)<span class="kw">,</span> wrong(<span class="dt">D</span><span class="kw">,</span> <span class="dt">D2</span>)<span class="kw">;</span></span>
<span id="cb8-31"><a href="#cb8-31" aria-hidden="true"></a>        wrong_place(<span class="dt">B</span><span class="kw">,</span> <span class="dv">2</span><span class="kw">,</span> <span class="dt">D2</span>)<span class="kw">,</span> wrong_place(<span class="dt">D</span><span class="kw">,</span> <span class="dv">4</span><span class="kw">,</span> <span class="dt">D2</span>)<span class="kw">,</span> wrong(<span class="dt">A</span><span class="kw">,</span> <span class="dt">D2</span>)<span class="kw">,</span> wrong(<span class="dt">C</span><span class="kw">,</span> <span class="dt">D2</span>)<span class="kw">;</span></span>
<span id="cb8-32"><a href="#cb8-32" aria-hidden="true"></a></span>
<span id="cb8-33"><a href="#cb8-33" aria-hidden="true"></a>        wrong_place(<span class="dt">C</span><span class="kw">,</span> <span class="dv">3</span><span class="kw">,</span> <span class="dt">D2</span>)<span class="kw">,</span> wrong_place(<span class="dt">A</span><span class="kw">,</span> <span class="dv">1</span><span class="kw">,</span> <span class="dt">D2</span>)<span class="kw">,</span> wrong(<span class="dt">B</span><span class="kw">,</span> <span class="dt">D2</span>)<span class="kw">,</span> wrong(<span class="dt">D</span><span class="kw">,</span> <span class="dt">D2</span>)<span class="kw">;</span></span>
<span id="cb8-34"><a href="#cb8-34" aria-hidden="true"></a>        wrong_place(<span class="dt">C</span><span class="kw">,</span> <span class="dv">3</span><span class="kw">,</span> <span class="dt">D2</span>)<span class="kw">,</span> wrong_place(<span class="dt">B</span><span class="kw">,</span> <span class="dv">2</span><span class="kw">,</span> <span class="dt">D2</span>)<span class="kw">,</span> wrong(<span class="dt">A</span><span class="kw">,</span> <span class="dt">D2</span>)<span class="kw">,</span> wrong(<span class="dt">D</span><span class="kw">,</span> <span class="dt">D2</span>)<span class="kw">;</span></span>
<span id="cb8-35"><a href="#cb8-35" aria-hidden="true"></a>        wrong_place(<span class="dt">C</span><span class="kw">,</span> <span class="dv">3</span><span class="kw">,</span> <span class="dt">D2</span>)<span class="kw">,</span> wrong_place(<span class="dt">D</span><span class="kw">,</span> <span class="dv">4</span><span class="kw">,</span> <span class="dt">D2</span>)<span class="kw">,</span> wrong(<span class="dt">A</span><span class="kw">,</span> <span class="dt">D2</span>)<span class="kw">,</span> wrong(<span class="dt">B</span><span class="kw">,</span> <span class="dt">D2</span>)<span class="kw">;</span></span>
<span id="cb8-36"><a href="#cb8-36" aria-hidden="true"></a></span>
<span id="cb8-37"><a href="#cb8-37" aria-hidden="true"></a>        wrong_place(<span class="dt">D</span><span class="kw">,</span> <span class="dv">4</span><span class="kw">,</span> <span class="dt">D2</span>)<span class="kw">,</span> wrong_place(<span class="dt">A</span><span class="kw">,</span> <span class="dv">1</span><span class="kw">,</span> <span class="dt">D2</span>)<span class="kw">,</span> wrong(<span class="dt">B</span><span class="kw">,</span> <span class="dt">D2</span>)<span class="kw">,</span> wrong(<span class="dt">C</span><span class="kw">,</span> <span class="dt">D2</span>)<span class="kw">;</span></span>
<span id="cb8-38"><a href="#cb8-38" aria-hidden="true"></a>        wrong_place(<span class="dt">D</span><span class="kw">,</span> <span class="dv">4</span><span class="kw">,</span> <span class="dt">D2</span>)<span class="kw">,</span> wrong_place(<span class="dt">B</span><span class="kw">,</span> <span class="dv">2</span><span class="kw">,</span> <span class="dt">D2</span>)<span class="kw">,</span> wrong(<span class="dt">A</span><span class="kw">,</span> <span class="dt">D2</span>)<span class="kw">,</span> wrong(<span class="dt">C</span><span class="kw">,</span> <span class="dt">D2</span>)<span class="kw">;</span></span>
<span id="cb8-39"><a href="#cb8-39" aria-hidden="true"></a>        wrong_place(<span class="dt">D</span><span class="kw">,</span> <span class="dv">4</span><span class="kw">,</span> <span class="dt">D2</span>)<span class="kw">,</span> wrong_place(<span class="dt">C</span><span class="kw">,</span> <span class="dv">3</span><span class="kw">,</span> <span class="dt">D2</span>)<span class="kw">,</span> wrong(<span class="dt">A</span><span class="kw">,</span> <span class="dt">D2</span>)<span class="kw">,</span> wrong(<span class="dt">B</span><span class="kw">,</span> <span class="dt">D2</span>)</span>
<span id="cb8-40"><a href="#cb8-40" aria-hidden="true"></a>    )<span class="kw">,</span></span>
<span id="cb8-41"><a href="#cb8-41" aria-hidden="true"></a></span>
<span id="cb8-42"><a href="#cb8-42" aria-hidden="true"></a>    <span class="co">% one digit is correct, and also in the right place</span></span>
<span id="cb8-43"><a href="#cb8-43" aria-hidden="true"></a>    <span class="co">% as above, we still don&#39;t know which digit that is, so we check each one.</span></span>
<span id="cb8-44"><a href="#cb8-44" aria-hidden="true"></a>    clue_3(<span class="dt">D3</span>)<span class="kw">,</span></span>
<span id="cb8-45"><a href="#cb8-45" aria-hidden="true"></a>    (</span>
<span id="cb8-46"><a href="#cb8-46" aria-hidden="true"></a>        right_place(<span class="dt">A</span><span class="kw">,</span> <span class="dv">1</span><span class="kw">,</span> <span class="dt">D3</span>)<span class="kw">,</span> wrong(<span class="dt">B</span><span class="kw">,</span> <span class="dt">D3</span>)<span class="kw">,</span> wrong(<span class="dt">C</span><span class="kw">,</span> <span class="dt">D3</span>)<span class="kw">,</span> wrong(<span class="dt">D</span><span class="kw">,</span> <span class="dt">D3</span>)<span class="kw">;</span></span>
<span id="cb8-47"><a href="#cb8-47" aria-hidden="true"></a>        right_place(<span class="dt">B</span><span class="kw">,</span> <span class="dv">2</span><span class="kw">,</span> <span class="dt">D3</span>)<span class="kw">,</span> wrong(<span class="dt">A</span><span class="kw">,</span> <span class="dt">D3</span>)<span class="kw">,</span> wrong(<span class="dt">C</span><span class="kw">,</span> <span class="dt">D3</span>)<span class="kw">,</span> wrong(<span class="dt">D</span><span class="kw">,</span> <span class="dt">D3</span>)<span class="kw">;</span></span>
<span id="cb8-48"><a href="#cb8-48" aria-hidden="true"></a>        right_place(<span class="dt">C</span><span class="kw">,</span> <span class="dv">3</span><span class="kw">,</span> <span class="dt">D3</span>)<span class="kw">,</span> wrong(<span class="dt">A</span><span class="kw">,</span> <span class="dt">D3</span>)<span class="kw">,</span> wrong(<span class="dt">B</span><span class="kw">,</span> <span class="dt">D3</span>)<span class="kw">,</span> wrong(<span class="dt">D</span><span class="kw">,</span> <span class="dt">D3</span>)<span class="kw">;</span></span>
<span id="cb8-49"><a href="#cb8-49" aria-hidden="true"></a>        right_place(<span class="dt">D</span><span class="kw">,</span> <span class="dv">4</span><span class="kw">,</span> <span class="dt">D3</span>)<span class="kw">,</span> wrong(<span class="dt">A</span><span class="kw">,</span> <span class="dt">D3</span>)<span class="kw">,</span> wrong(<span class="dt">B</span><span class="kw">,</span> <span class="dt">D3</span>)<span class="kw">,</span> wrong(<span class="dt">C</span><span class="kw">,</span> <span class="dt">D3</span>)</span>
<span id="cb8-50"><a href="#cb8-50" aria-hidden="true"></a>    )<span class="kw">,</span></span>
<span id="cb8-51"><a href="#cb8-51" aria-hidden="true"></a></span>
<span id="cb8-52"><a href="#cb8-52" aria-hidden="true"></a>    <span class="co">% none of the digits are correct, so they can be completely excluded</span></span>
<span id="cb8-53"><a href="#cb8-53" aria-hidden="true"></a>    <span class="co">% we know for a fact the final result will not contain any of these digits.</span></span>
<span id="cb8-54"><a href="#cb8-54" aria-hidden="true"></a>    clue_4(<span class="dt">D4</span>)<span class="kw">,</span></span>
<span id="cb8-55"><a href="#cb8-55" aria-hidden="true"></a>    (</span>
<span id="cb8-56"><a href="#cb8-56" aria-hidden="true"></a>        wrong(<span class="dt">A</span><span class="kw">,</span> <span class="dt">D4</span>)<span class="kw">,</span> wrong(<span class="dt">B</span><span class="kw">,</span> <span class="dt">D4</span>)<span class="kw">,</span> wrong(<span class="dt">C</span><span class="kw">,</span> <span class="dt">D4</span>)<span class="kw">,</span> wrong(<span class="dt">D</span><span class="kw">,</span> <span class="dt">D4</span>)</span>
<span id="cb8-57"><a href="#cb8-57" aria-hidden="true"></a>    )<span class="kw">,</span></span>
<span id="cb8-58"><a href="#cb8-58" aria-hidden="true"></a></span>
<span id="cb8-59"><a href="#cb8-59" aria-hidden="true"></a>    <span class="co">% again, two digits are correct but not in the right order</span></span>
<span id="cb8-60"><a href="#cb8-60" aria-hidden="true"></a>    <span class="co">% we do a similar check as before but also need to look</span></span>
<span id="cb8-61"><a href="#cb8-61" aria-hidden="true"></a>    <span class="co">% back into the previous clue to eliminate wrong candidates;</span></span>
<span id="cb8-62"><a href="#cb8-62" aria-hidden="true"></a>    <span class="co">% this is why we query D2, as well as D5.</span></span>
<span id="cb8-63"><a href="#cb8-63" aria-hidden="true"></a>    clue_5(<span class="dt">D5</span>)<span class="kw">,</span></span>
<span id="cb8-64"><a href="#cb8-64" aria-hidden="true"></a>    (</span>
<span id="cb8-65"><a href="#cb8-65" aria-hidden="true"></a>        wrong_place(<span class="dt">A</span><span class="kw">,</span> <span class="dv">1</span><span class="kw">,</span> <span class="dt">D5</span>)<span class="kw">,</span> wrong_place(<span class="dt">B</span><span class="kw">,</span> <span class="dv">2</span><span class="kw">,</span> <span class="dt">D5</span>)<span class="kw">,</span> wrong(<span class="dt">C</span><span class="kw">,</span> <span class="dt">D5</span>)<span class="kw">,</span> wrong(<span class="dt">D</span><span class="kw">,</span> <span class="dt">D5</span>)<span class="kw">;</span></span>
<span id="cb8-66"><a href="#cb8-66" aria-hidden="true"></a>        wrong_place(<span class="dt">A</span><span class="kw">,</span> <span class="dv">1</span><span class="kw">,</span> <span class="dt">D5</span>)<span class="kw">,</span> wrong_place(<span class="dt">C</span><span class="kw">,</span> <span class="dv">3</span><span class="kw">,</span> <span class="dt">D5</span>)<span class="kw">,</span> wrong(<span class="dt">B</span><span class="kw">,</span> <span class="dt">D5</span>)<span class="kw">,</span> wrong(<span class="dt">D</span><span class="kw">,</span> <span class="dt">D5</span>)<span class="kw">;</span></span>
<span id="cb8-67"><a href="#cb8-67" aria-hidden="true"></a>        wrong_place(<span class="dt">A</span><span class="kw">,</span> <span class="dv">1</span><span class="kw">,</span> <span class="dt">D5</span>)<span class="kw">,</span> wrong_place(<span class="dt">D</span><span class="kw">,</span> <span class="dv">4</span><span class="kw">,</span> <span class="dt">D5</span>)<span class="kw">,</span> wrong(<span class="dt">B</span><span class="kw">,</span> <span class="dt">D2</span>)<span class="kw">,</span> wrong(<span class="dt">C</span><span class="kw">,</span> <span class="dt">D2</span>)<span class="kw">;</span></span>
<span id="cb8-68"><a href="#cb8-68" aria-hidden="true"></a></span>
<span id="cb8-69"><a href="#cb8-69" aria-hidden="true"></a>        wrong_place(<span class="dt">B</span><span class="kw">,</span> <span class="dv">2</span><span class="kw">,</span> <span class="dt">D5</span>)<span class="kw">,</span> wrong_place(<span class="dt">A</span><span class="kw">,</span> <span class="dv">1</span><span class="kw">,</span> <span class="dt">D5</span>)<span class="kw">,</span> wrong(<span class="dt">C</span><span class="kw">,</span> <span class="dt">D5</span>)<span class="kw">,</span> wrong(<span class="dt">D</span><span class="kw">,</span> <span class="dt">D5</span>)<span class="kw">;</span></span>
<span id="cb8-70"><a href="#cb8-70" aria-hidden="true"></a>        wrong_place(<span class="dt">B</span><span class="kw">,</span> <span class="dv">2</span><span class="kw">,</span> <span class="dt">D5</span>)<span class="kw">,</span> wrong_place(<span class="dt">C</span><span class="kw">,</span> <span class="dv">3</span><span class="kw">,</span> <span class="dt">D5</span>)<span class="kw">,</span> wrong(<span class="dt">A</span><span class="kw">,</span> <span class="dt">D5</span>)<span class="kw">,</span> wrong(<span class="dt">D</span><span class="kw">,</span> <span class="dt">D5</span>)<span class="kw">;</span></span>
<span id="cb8-71"><a href="#cb8-71" aria-hidden="true"></a>        wrong_place(<span class="dt">B</span><span class="kw">,</span> <span class="dv">2</span><span class="kw">,</span> <span class="dt">D5</span>)<span class="kw">,</span> wrong_place(<span class="dt">D</span><span class="kw">,</span> <span class="dv">4</span><span class="kw">,</span> <span class="dt">D5</span>)<span class="kw">,</span> wrong(<span class="dt">A</span><span class="kw">,</span> <span class="dt">D2</span>)<span class="kw">,</span> wrong(<span class="dt">C</span><span class="kw">,</span> <span class="dt">D2</span>)<span class="kw">;</span></span>
<span id="cb8-72"><a href="#cb8-72" aria-hidden="true"></a></span>
<span id="cb8-73"><a href="#cb8-73" aria-hidden="true"></a>        wrong_place(<span class="dt">C</span><span class="kw">,</span> <span class="dv">3</span><span class="kw">,</span> <span class="dt">D5</span>)<span class="kw">,</span> wrong_place(<span class="dt">A</span><span class="kw">,</span> <span class="dv">1</span><span class="kw">,</span> <span class="dt">D5</span>)<span class="kw">,</span> wrong(<span class="dt">B</span><span class="kw">,</span> <span class="dt">D5</span>)<span class="kw">,</span> wrong(<span class="dt">D</span><span class="kw">,</span> <span class="dt">D5</span>)<span class="kw">;</span></span>
<span id="cb8-74"><a href="#cb8-74" aria-hidden="true"></a>        wrong_place(<span class="dt">C</span><span class="kw">,</span> <span class="dv">3</span><span class="kw">,</span> <span class="dt">D5</span>)<span class="kw">,</span> wrong_place(<span class="dt">B</span><span class="kw">,</span> <span class="dv">2</span><span class="kw">,</span> <span class="dt">D5</span>)<span class="kw">,</span> wrong(<span class="dt">A</span><span class="kw">,</span> <span class="dt">D5</span>)<span class="kw">,</span> wrong(<span class="dt">D</span><span class="kw">,</span> <span class="dt">D5</span>)<span class="kw">;</span></span>
<span id="cb8-75"><a href="#cb8-75" aria-hidden="true"></a>        wrong_place(<span class="dt">C</span><span class="kw">,</span> <span class="dv">3</span><span class="kw">,</span> <span class="dt">D5</span>)<span class="kw">,</span> wrong_place(<span class="dt">D</span><span class="kw">,</span> <span class="dv">4</span><span class="kw">,</span> <span class="dt">D5</span>)<span class="kw">,</span> wrong(<span class="dt">A</span><span class="kw">,</span> <span class="dt">D2</span>)<span class="kw">,</span> wrong(<span class="dt">B</span><span class="kw">,</span> <span class="dt">D2</span>)<span class="kw">;</span></span>
<span id="cb8-76"><a href="#cb8-76" aria-hidden="true"></a></span>
<span id="cb8-77"><a href="#cb8-77" aria-hidden="true"></a>        wrong_place(<span class="dt">D</span><span class="kw">,</span> <span class="dv">4</span><span class="kw">,</span> <span class="dt">D5</span>)<span class="kw">,</span> wrong_place(<span class="dt">A</span><span class="kw">,</span> <span class="dv">1</span><span class="kw">,</span> <span class="dt">D5</span>)<span class="kw">,</span> wrong(<span class="dt">B</span><span class="kw">,</span> <span class="dt">D5</span>)<span class="kw">,</span> wrong(<span class="dt">C</span><span class="kw">,</span> <span class="dt">D5</span>)<span class="kw">;</span></span>
<span id="cb8-78"><a href="#cb8-78" aria-hidden="true"></a>        wrong_place(<span class="dt">D</span><span class="kw">,</span> <span class="dv">4</span><span class="kw">,</span> <span class="dt">D5</span>)<span class="kw">,</span> wrong_place(<span class="dt">B</span><span class="kw">,</span> <span class="dv">2</span><span class="kw">,</span> <span class="dt">D5</span>)<span class="kw">,</span> wrong(<span class="dt">A</span><span class="kw">,</span> <span class="dt">D5</span>)<span class="kw">,</span> wrong(<span class="dt">C</span><span class="kw">,</span> <span class="dt">D5</span>)<span class="kw">;</span></span>
<span id="cb8-79"><a href="#cb8-79" aria-hidden="true"></a>        wrong_place(<span class="dt">D</span><span class="kw">,</span> <span class="dv">4</span><span class="kw">,</span> <span class="dt">D5</span>)<span class="kw">,</span> wrong_place(<span class="dt">C</span><span class="kw">,</span> <span class="dv">3</span><span class="kw">,</span> <span class="dt">D5</span>)<span class="kw">,</span> wrong(<span class="dt">A</span><span class="kw">,</span> <span class="dt">D2</span>)<span class="kw">,</span> wrong(<span class="dt">B</span><span class="kw">,</span> <span class="dt">D2</span>)</span>
<span id="cb8-80"><a href="#cb8-80" aria-hidden="true"></a>    )<span class="kw">,</span></span>
<span id="cb8-81"><a href="#cb8-81" aria-hidden="true"></a></span>
<span id="cb8-82"><a href="#cb8-82" aria-hidden="true"></a>    <span class="co">% Take (or cut) the first result, no need for continued backtracking</span></span>
<span id="cb8-83"><a href="#cb8-83" aria-hidden="true"></a>    <span class="co">% this is probably most similar to an early return or short-circuit.</span></span>
<span id="cb8-84"><a href="#cb8-84" aria-hidden="true"></a>    <span class="kw">!,</span></span>
<span id="cb8-85"><a href="#cb8-85" aria-hidden="true"></a></span>
<span id="cb8-86"><a href="#cb8-86" aria-hidden="true"></a>    <span class="co">% we&#39;ve cracked the code! A, B, C, and D each refer to</span></span>
<span id="cb8-87"><a href="#cb8-87" aria-hidden="true"></a>    <span class="co">% the only answer that makes sense given the previous</span></span>
<span id="cb8-88"><a href="#cb8-88" aria-hidden="true"></a>    <span class="co">% rules.</span></span>
<span id="cb8-89"><a href="#cb8-89" aria-hidden="true"></a>    <span class="dt">Code</span> <span class="kw">=</span> [<span class="dt">A</span>, <span class="dt">B</span>, <span class="dt">C</span>, <span class="dt">D</span>]<span class="kw">.</span></span></code></pre></div>
<p>Did you solve the puzzle yourself? Do you remember the answer? If you don’t care to copy and paste all of that, you can open up this ready made notebook<a href="#fn5" class="footnote-ref" id="fnref5" role="doc-noteref"><sup>5</sup></a>, and then run the following:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode prolog"><code class="sourceCode prolog"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true"></a>crack_code([<span class="dt">A</span>, <span class="dt">B</span>, <span class="dt">C</span>, <span class="dt">D</span>])<span class="kw">,</span></span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true"></a><span class="fu">write</span>(<span class="st">&#39;</span><span class="er">The</span><span class="al"> </span><span class="er">first</span><span class="al"> </span><span class="er">number</span><span class="al"> </span><span class="er">is</span><span class="st">:</span><span class="al"> </span><span class="st">&#39;</span>)<span class="kw">,</span> <span class="fu">write</span>(<span class="dt">A</span>)<span class="kw">,</span> <span class="fu">write</span>(<span class="st">&#39;</span><span class="ch">\n</span><span class="st">&#39;</span>)<span class="kw">,</span></span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true"></a><span class="fu">write</span>(<span class="st">&#39;</span><span class="er">The</span><span class="al"> </span><span class="er">second</span><span class="al"> </span><span class="er">number</span><span class="al"> </span><span class="er">is</span><span class="st">:</span><span class="al"> </span><span class="st">&#39;</span>)<span class="kw">,</span> <span class="fu">write</span>(<span class="dt">B</span>)<span class="kw">,</span> <span class="fu">write</span>(<span class="st">&#39;</span><span class="ch">\n</span><span class="st">&#39;</span>)<span class="kw">,</span></span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true"></a><span class="fu">write</span>(<span class="st">&#39;</span><span class="er">The</span><span class="al"> </span><span class="er">third</span><span class="al"> </span><span class="er">number</span><span class="al"> </span><span class="er">is</span><span class="st">:</span><span class="al"> </span><span class="st">&#39;</span>)<span class="kw">,</span> <span class="fu">write</span>(<span class="dt">C</span>)<span class="kw">,</span> <span class="fu">write</span>(<span class="st">&#39;</span><span class="ch">\n</span><span class="st">&#39;</span>)<span class="kw">,</span></span>
<span id="cb9-5"><a href="#cb9-5" aria-hidden="true"></a><span class="fu">write</span>(<span class="st">&#39;</span><span class="er">The</span><span class="al"> </span><span class="er">fourth</span><span class="al"> </span><span class="er">number</span><span class="al"> </span><span class="er">is</span><span class="st">:</span><span class="al"> </span><span class="st">&#39;</span>)<span class="kw">,</span> <span class="fu">write</span>(<span class="dt">D</span>)<span class="kw">,</span> <span class="fu">write</span>(<span class="st">&#39;</span><span class="ch">\n</span><span class="st">&#39;</span>)<span class="kw">.</span></span></code></pre></div>
<p>The exercise of writing that in a less brute-force manner is left to you, my beloved reader.</p>
<h2 id="the-grand-finale">The grand finale</h2>
<p>So ends 2020, so ends this post. Did your brain-grown answer match the one this Prolog program gave you? What do you think about logic programming in general now you’ve seen some of it? Why not share it with your friends or whoever, if they’re interested, and see what they think?</p>
<p>Mad propz to the Prolog community on Reddit also, whose example solutions helped point me in the right direction <a href="#fn6" class="footnote-ref" id="fnref6" role="doc-noteref"><sup>6</sup></a>.</p>
<section class="footnotes" role="doc-endnotes">
<hr />
<ol>
<li id="fn1" role="doc-endnote"><p><a href="https://amzi.com/AdventureInProlog/a1start.php" class="uri">https://amzi.com/AdventureInProlog/a1start.php</a> (buy the book, srlsy…)<a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn2" role="doc-endnote"><p><a href="https://swish.swi-prolog.org/p/KfdGtcJr.swinb" class="uri">https://swish.swi-prolog.org/p/KfdGtcJr.swinb</a><a href="#fnref2" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn3" role="doc-endnote"><p><a href="https://mitpress.mit.edu/books/art-prolog-second-edition" class="uri">https://mitpress.mit.edu/books/art-prolog-second-edition</a><a href="#fnref3" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn4" role="doc-endnote"><p><a href="https://www.swi-prolog.org/man/clpfd.html" class="uri">https://www.swi-prolog.org/man/clpfd.html</a><a href="#fnref4" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn5" role="doc-endnote"><p><a href="https://swish.swi-prolog.org/p/MgtEUnSv.swinb" class="uri">https://swish.swi-prolog.org/p/MgtEUnSv.swinb</a><a href="#fnref5" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn6" role="doc-endnote"><p><a href="https://www.reddit.com/r/prolog/comments/fzww7m/cracking_this_puzzle_with_prolog/" class="uri">https://www.reddit.com/r/prolog/comments/fzww7m/cracking_this_puzzle_with_prolog/</a><a href="#fnref6" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>
    </section>
</article>]]></summary>
</entry>
<entry>
    <title>Devops</title>
    <link href="https://www.kamelasa.dev/programming/devops" />
    <id>https://www.kamelasa.dev/programming/devops</id>
    <published>2020-09-18T00:00:00Z</published>
    <updated>2020-09-18T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
    <header class="header inverse-video">
        <h2 class="title">Devops</h2>
        <span class="ert">~4 min. read</span>
    </header>

    <section>
        <p>I recently left a healthcare company called Babylon a few weeks back. Of all the things I enjoyed there, and the things that made it unique, one has to be how it has managed to dance across the line between startup and enterprise. I don’t mean to say ‘enterprise’ in a perjorative sense; it’s more that you can’t really avoid that when you’re working in a heavily regulated and audited sector. Mistakes can be literally life or death, and the data collected over time includes people’s medical information and health records. There really isn’t any room for fucking about, but that doesn’t mean that other business functions have to be so serious.</p>
<p>Enterprise might not be the best word, but it’s the only one I have right now, and nevertheless I took a few valuable lessons away from the experience that I now find it quite strange to be without.</p>
<p>Let’s talk about bugs and production servers. Before Bablyon I had not worked in a single place that restricted access to production. As a developer working primarily with Ruby on Rails applications, getting prod access on Heroku or AWS was practically an onboarding step, and that meant I could easily boot up a console and modify the application runtime on the fly. This is an amazingly powerful tool in development and testing environments, it’s basically just a boostrapped REPL, but expose that in production and a malicious actor could wreak all sorts of havoc without leaving a trace. This is even worse if your rails app is running under <code>root</code> for some reason (e.g. through a poor Docker setup), as you can quite easily jump into a shell from there.</p>
<p>You couldn’t do any of this at Bablyon because production and preprod were locked down <em>tight</em>, and even seeing production logs required a background check. This didn’t really make debugging worse, because instead there was a huge investment in tooling (internal and external) and developer experience to balance it out. One of my favourite outcomes of this is the creation of an open source tool for managing a Kubernetes cluster, called <code>shipcat</code><a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a>. You know it’s good when it has its own cute logo.</p>
<p>What I’ve since realised is that this particular crutch (live debugging in production) prevents the business from properly investing in safer and more compliant tools for engineers to investigate issues. You want proper structured logging, good alerting on error conditions, and a whole slew of observability (o11y) tools that can help you diagnose the system from the outside-in without compromising it. You want to have a team of impassioned engineers who enjoy working on internal productivity/efficacy, creating new tools to address pain-points in the organisation’s development and support lifecycle.</p>
<p>The ELK stack seems to be the go-to solution for structured logging, and knowing how to work your way around Kibana (and Elasticsearch by extension) is invaluable. Not only can you trace logs to identify an issue, you can visualise them to get an idea of how pervasive that problem is. You know, you missed an N+1 query but a simple log visualisation showing thousands of similar requests in aggregate can help you identify that.</p>
<p>Sentry is a fantastic tool for logging exceptions in more detail, as with the correct setup you can get a decent stacktrace and combine it with other information to learn more about a problem. Again, this aggregates errors for you so you can assess the scope and severity of the issue just by counting the number of events over time.</p>
<p>Application Performance Management (APM) tools like New Relic and Datadog are similarly great, especially when dealing with microservices or a distributed codebase, as you can get a much bigger picture of what is happening across network boundaries, and not just in a single application. This would apply the same for your logs provided you pass around a correlation ID that allows you to group the various hops for a single inbound request.</p>
<p>It’s not just about the code though, what about the infrastructure and the hardware? Grafana will sort you out there, so you can understand what sort of load your servers and databases are under.</p>
<p>I feel like the devops culture is one that ultimately democratises your technology stack and the way it’s operated. It offers transparency into the system, allowing software engineers and platform/infrastructure engineers to make decisions based on the same information. It breaks down the silos you might typically build around the programming language you use, or how you deploy software, and who exactly should own that. Everyone can own it and bring their experience to the table to help iterate and improve.</p>
<p>Before I proselytise too much, I think this is really important because you can only go so far before the luxury of directly debugging in production is stripped away. GDPR, HIPAA, PCI, etc. will surely see to that as your startup grows and expands. In place of that, you have a fantastic set of tools that can give you everything you need to kick off an investigation if something goes wrong, if you take the time to learn how to use them.</p>
<p>And if I had one suggestion for any budding project finding itself in the hands of real life users in production, consider what you want your devops culture to be like and, if you can, see how early you can encourage your team without depending on offering wide-scale production access. And maybe even consider what kind of internal tooling you can build to improve the productivity and efficacy of your engineers.</p>
<section class="footnotes" role="doc-endnotes">
<hr />
<ol>
<li id="fn1" role="doc-endnote"><p><a href="https://github.com/babylonhealth/shipcat" class="uri">https://github.com/babylonhealth/shipcat</a><a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>
    </section>
</article>]]></summary>
</entry>
<entry>
    <title>Hakyll on DevOps Pipelines</title>
    <link href="https://www.kamelasa.dev/programming/hakyll-on-devops-pipelines" />
    <id>https://www.kamelasa.dev/programming/hakyll-on-devops-pipelines</id>
    <published>2020-08-18T00:00:00Z</published>
    <updated>2020-08-18T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
    <header class="header inverse-video">
        <h2 class="title">Hakyll on DevOps Pipelines</h2>
        <span class="ert">~7 min. read</span>
    </header>

    <section>
        <p>In a way, this is total overkill for a static site. If I have the repo cloned on my machine and I want to publish a new post, I can do it in two commands:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true"></a><span class="ex">stack</span> exec site build</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true"></a><span class="fu">scp</span> -r _site/ deploy@mrlee.dev:/var/www/www.mrlee.dev/</span></code></pre></div>
<p>It’s flawed compared to using <code>rsync</code>, as it won’t remove existing files, but it does the job in less than a second or two.</p>
<p>The thing is, this isn’t so quick if I want to publish a post from a different computer that doesn’t have any programming tools installed. I would have to install <code>stack</code><a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a>, which is a build tool for Haskell, and then I would have to run <code>stack build</code>. This can take at least half an hour as the command will pull down the correct version of <code>GHC</code> and a ‘snapshot’ (basically a huge collection of all the Hackage<a href="#fn2" class="footnote-ref" id="fnref2" role="doc-noteref"><sup>2</sup></a> libraries available for that build) before it even <em>thinks</em> about compiling my <code>site.hs</code> file. It also means to committing a few gigs of storage space for all of that.</p>
<p>I like to write from my little Surface Pro when I’m out and about, so I’d rather not do a full-blown compilation on that for the sake of my battery. Enter Azure DevOps Pipelines<a href="#fn3" class="footnote-ref" id="fnref3" role="doc-noteref"><sup>3</sup></a>.</p>
<p>I’ve been keen on playing with these pipelines for a while, and much like any dev-tool, it has a free tier for open source repos. So does Github Actions<a href="#fn4" class="footnote-ref" id="fnref4" role="doc-noteref"><sup>4</sup></a>, which actually shares some of the underlying architecture of DevOps Pipelines, but I wanted to play with something different.</p>
<p>Let’s do a step-by-step walk through my setup.</p>
<hr />
<div class="sourceCode" id="cb2"><pre class="sourceCode yaml"><code class="sourceCode yaml"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true"></a><span class="fu">trigger</span><span class="kw">:</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true"></a><span class="at">  </span><span class="kw">-</span><span class="at"> master</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true"></a><span class="fu">pool</span><span class="kw">:</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true"></a><span class="at">  </span><span class="fu">vmImage</span><span class="kw">:</span><span class="at"> </span><span class="st">&#39;ubuntu-latest&#39;</span></span></code></pre></div>
<p>This is pretty much CI boilerplate. The build will run on any PR that targets <code>master</code>, and it uses Ubuntu as the underlying image. I’m not doing any Docker stuff here.</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode yaml"><code class="sourceCode yaml"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true"></a><span class="fu">jobs</span><span class="kw">:</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true"></a><span class="kw">-</span><span class="at"> </span><span class="fu">job</span><span class="kw">:</span><span class="at"> build</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true"></a><span class="at">  </span><span class="fu">steps</span><span class="kw">:</span><span class="at"> ...</span></span></code></pre></div>
<p>I only have a couple of jobs in this pipeline, to keep it simple. The next bunch of steps are nested under this.</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode yaml"><code class="sourceCode yaml"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true"></a><span class="kw">- </span><span class="fu">script</span><span class="kw">:</span><span class="at"> </span><span class="ch">|</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true"></a>      mkdir -p ~/.local/bin $(Build.BinariesDirectory)</span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true"></a>      curl -L https://get.haskellstack.org/stable/linux-x86_64.tar.gz | tar xz --wildcards --strip-components=1 -C ~/.local/bin &#39;*/stack&#39;</span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true"></a><span class="at">  </span><span class="fu">displayName</span><span class="kw">:</span><span class="at"> Install Stack</span></span></code></pre></div>
<p>Won’t get far without grabbing the latest stable Stack binary.</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode yaml"><code class="sourceCode yaml"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true"></a><span class="kw">-</span><span class="at"> </span><span class="fu">task</span><span class="kw">:</span><span class="at"> Cache@2</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true"></a><span class="at">  </span><span class="fu">displayName</span><span class="kw">:</span><span class="at"> Cache Stack/GHC snapshot</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true"></a><span class="at">  </span><span class="fu">inputs</span><span class="kw">:</span></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true"></a><span class="at">    </span><span class="fu">key</span><span class="kw">:</span><span class="at"> </span><span class="st">&#39;stack | root&#39;</span></span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true"></a><span class="at">    </span><span class="fu">path</span><span class="kw">:</span><span class="at"> .stack/</span></span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true"></a><span class="at">    </span><span class="fu">cacheHitVar</span><span class="kw">:</span><span class="at"> </span><span class="st">&#39;STACK_SNAPSHOT_RESTORED&#39;</span></span></code></pre></div>
<p>Later on there will be a step that runs <code>stack build</code>, which will take about 40 minutes in CI. It would be a waste to repeatedly download all of that, so I’m caching the root stack folder for good measure. The <code>cacheHitVar</code> is something we will reference later.</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode yaml"><code class="sourceCode yaml"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true"></a><span class="kw">-</span><span class="at"> </span><span class="fu">task</span><span class="kw">:</span><span class="at"> Cache@2</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true"></a><span class="at">  </span><span class="fu">displayName</span><span class="kw">:</span><span class="at"> Cache local stack deps</span></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true"></a><span class="at">  </span><span class="fu">inputs</span><span class="kw">:</span></span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true"></a><span class="at">    </span><span class="fu">key</span><span class="kw">:</span><span class="at"> </span><span class="st">&#39;stack | stack.yaml.lock&#39;</span></span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true"></a><span class="at">    </span><span class="fu">path</span><span class="kw">:</span><span class="at"> .stack-work/</span></span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true"></a><span class="at">    </span><span class="fu">cacheHitVar</span><span class="kw">:</span><span class="at"> </span><span class="st">&#39;STACK_DEPS_RESTORED&#39;</span></span></code></pre></div>
<p>This is the same as the last step, but it’s for the dependencies my static site requires. I want to cache these separately so adding a new project dependency doesn’t force a full refresh of the Stack snapshot.</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode yaml"><code class="sourceCode yaml"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true"></a><span class="kw">- </span><span class="fu">script</span><span class="kw">:</span><span class="at"> </span><span class="ch">|</span></span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true"></a>      export PATH=$HOME/.local/bin:$PATH</span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true"></a>      stack --no-terminal --stack-root $(System.DefaultWorkingDirectory)/.stack setup</span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true"></a><span class="at">  </span><span class="fu">displayName</span><span class="kw">:</span><span class="at"> Build Snapshot</span></span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true"></a><span class="at">  </span><span class="fu">condition</span><span class="kw">:</span><span class="at"> ne(variables.STACK_SNAPSHOT_RESTORED, &#39;true&#39;)</span></span></code></pre></div>
<p>Notice the <code>STACK_SNAPSHOT_RESTORED</code> condition at the bottom there? This step sets up GHC and the Stack snapshot, but only if one wasn’t restored from the cache. If the cache has it, then it will have alread been fetched.</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode yaml"><code class="sourceCode yaml"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true"></a><span class="kw">- </span><span class="fu">script</span><span class="kw">:</span><span class="at"> </span><span class="ch">|</span></span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true"></a>      export PATH=$HOME/.local/bin:$PATH</span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true"></a>      stack --no-terminal --stack-root  $(System.DefaultWorkingDirectory)/.stack build</span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true"></a><span class="at">  </span><span class="fu">displayName</span><span class="kw">:</span><span class="at"> Build Dependencies</span></span>
<span id="cb8-5"><a href="#cb8-5" aria-hidden="true"></a><span class="at">  </span><span class="fu">condition</span><span class="kw">:</span><span class="at"> ne(variables.STACK_DEPS_RESTORED, &#39;true&#39;)</span></span></code></pre></div>
<p>This is the same as above, but for the project dependencies. So far so good. We’re almost done now.</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode yaml"><code class="sourceCode yaml"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true"></a><span class="kw">- </span><span class="fu">script</span><span class="kw">:</span><span class="at"> </span><span class="ch">|</span></span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true"></a>      export PATH=$HOME/.local/bin:$PATH</span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true"></a>      stack --no-terminal --stack-root $(System.DefaultWorkingDirectory)/.stack install --local-bin-path $(Build.BinariesDirectory)</span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true"></a><span class="at">  </span><span class="fu">displayName</span><span class="kw">:</span><span class="at"> Build Site Executable</span></span></code></pre></div>
<p>Since I’ve already run <code>stack build</code>, this just copies the binary to a different location, which I use to store it as a build artifact. <code>Build.BinariesDirectory</code> is a special place on the VM to store compiled build artifacts. It doesn’t matter where specifically that is, only that it’s the same across steps.</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode yaml"><code class="sourceCode yaml"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true"></a><span class="kw">-</span><span class="at"> </span><span class="fu">task</span><span class="kw">:</span><span class="at"> PublishBuildArtifacts@1</span></span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true"></a><span class="at">  </span><span class="fu">displayName</span><span class="kw">:</span><span class="at"> Save static site binary</span></span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true"></a><span class="at">  </span><span class="fu">inputs</span><span class="kw">:</span></span>
<span id="cb10-4"><a href="#cb10-4" aria-hidden="true"></a><span class="at">    </span><span class="fu">pathToPublish</span><span class="kw">:</span><span class="at"> $(Build.BinariesDirectory)</span></span>
<span id="cb10-5"><a href="#cb10-5" aria-hidden="true"></a><span class="at">    </span><span class="fu">artifactName</span><span class="kw">:</span><span class="at"> site</span></span></code></pre></div>
<p>This is where that binaries directory comes into play, as I can tell Azure to upload everything in there as a build artifact, which I can then refer to in another job. This isn’t quite the same as a cache, as a build is not expected to fail if the cache goes missing. It would fail if the binary isn’t there though.</p>
<p>So, that’s the first step done, but what about actually publishing a post? I have two jobs for that, which are very similar (one for draft posts/staging, one for prod). I’ll describe one of them.</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode yaml"><code class="sourceCode yaml"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true"></a><span class="kw">-</span><span class="at"> </span><span class="fu">job</span><span class="kw">:</span><span class="at"> deploy_published</span></span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true"></a><span class="at">  </span><span class="fu">dependsOn</span><span class="kw">:</span><span class="at"> build</span></span>
<span id="cb11-3"><a href="#cb11-3" aria-hidden="true"></a><span class="at">  </span><span class="fu">condition</span><span class="kw">:</span><span class="at"> and(succeeded(), eq(variables[&#39;build.sourceBranchName&#39;], &#39;master&#39;))</span></span>
<span id="cb11-4"><a href="#cb11-4" aria-hidden="true"></a><span class="at">  </span><span class="fu">steps</span><span class="kw">:</span><span class="at"> ...</span></span></code></pre></div>
<p>The key to this step is the condition. This will run only if the <code>build</code> job was successful, <em>and</em> the branch being built is the master branch. Practically, this only runs if I push straight to master or merge a PR. The staging version runs only on PRs.</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode yaml"><code class="sourceCode yaml"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true"></a><span class="kw">-</span><span class="at"> </span><span class="fu">task</span><span class="kw">:</span><span class="at"> DownloadBuildArtifacts@0</span></span>
<span id="cb12-2"><a href="#cb12-2" aria-hidden="true"></a><span class="at">  </span><span class="fu">displayName</span><span class="kw">:</span><span class="at"> Download site binary</span></span>
<span id="cb12-3"><a href="#cb12-3" aria-hidden="true"></a><span class="at">  </span><span class="fu">inputs</span><span class="kw">:</span></span>
<span id="cb12-4"><a href="#cb12-4" aria-hidden="true"></a><span class="at">    </span><span class="fu">artifactName</span><span class="kw">:</span><span class="at"> site</span></span>
<span id="cb12-5"><a href="#cb12-5" aria-hidden="true"></a><span class="at">    </span><span class="fu">downloadPath</span><span class="kw">:</span><span class="at"> $(System.DefaultWorkingDirectory)</span></span></code></pre></div>
<p>Time to put that binary I compiled to good use. It downloads it into the main working directory and I’ll call it directly in a later step. The executable is self-contained (or otherwise dynamically links stuff the image already has), so I don’t need to pull down Stack/GHC stuff again.</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode yaml"><code class="sourceCode yaml"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true"></a><span class="kw">- </span><span class="fu">script</span><span class="kw">:</span><span class="at"> </span><span class="ch">|</span></span>
<span id="cb13-2"><a href="#cb13-2" aria-hidden="true"></a>      export PATH=$(System.DefaultWorkingDirectory)/site:$PATH</span>
<span id="cb13-3"><a href="#cb13-3" aria-hidden="true"></a>      chmod +x $(System.DefaultWorkingDirectory)/site/site</span>
<span id="cb13-4"><a href="#cb13-4" aria-hidden="true"></a>      site build</span>
<span id="cb13-5"><a href="#cb13-5" aria-hidden="true"></a><span class="at">  </span><span class="fu">displayName</span><span class="kw">:</span><span class="at"> Build with published posts</span></span></code></pre></div>
<p>This is the same as running <code>stack exec site build</code> on my local machine. It compiles the static site, so finally I’ll have a new version to upload.</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode yaml"><code class="sourceCode yaml"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true"></a><span class="kw">-</span><span class="at"> </span><span class="fu">task</span><span class="kw">:</span><span class="at"> InstallSSHKey@0</span></span>
<span id="cb14-2"><a href="#cb14-2" aria-hidden="true"></a><span class="at">  </span><span class="fu">displayName</span><span class="kw">:</span><span class="at"> Setup SSH</span></span>
<span id="cb14-3"><a href="#cb14-3" aria-hidden="true"></a><span class="at">  </span><span class="fu">inputs</span><span class="kw">:</span></span>
<span id="cb14-4"><a href="#cb14-4" aria-hidden="true"></a><span class="at">    </span><span class="fu">knownHostsEntry</span><span class="kw">:</span><span class="at"> </span><span class="st">&#39;$(NexusKnownHost)&#39;</span></span>
<span id="cb14-5"><a href="#cb14-5" aria-hidden="true"></a><span class="at">    </span><span class="fu">sshKeySecureFile</span><span class="kw">:</span><span class="at"> </span><span class="st">&#39;nexus_deploy&#39;</span></span></code></pre></div>
<p>I host this blog on my own little VPS, which means that the server needs to know that the CI is authorised to connect to it with its SSH key. This is the same as having a deploy key on GitHub, and requires generating a keypair to be stored in CI, with the public key being added to your <code>authorized_keys</code> file of the appropriate user on the server.</p>
<p><em>(At this point I’ll say that if you’re doing this yourself, make sure to properly harden your server. I’ll describe this more in a follow-up post.)</em></p>
<p>There’s only step left now, and that’s to deploy!</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode yaml"><code class="sourceCode yaml"><span id="cb15-1"><a href="#cb15-1" aria-hidden="true"></a><span class="kw">-</span><span class="at"> </span><span class="fu">task</span><span class="kw">:</span><span class="at"> CopyFilesOverSSH@0</span></span>
<span id="cb15-2"><a href="#cb15-2" aria-hidden="true"></a><span class="at">  </span><span class="fu">displayName</span><span class="kw">:</span><span class="at"> Deploy to prod</span></span>
<span id="cb15-3"><a href="#cb15-3" aria-hidden="true"></a><span class="at">  </span><span class="fu">inputs</span><span class="kw">:</span></span>
<span id="cb15-4"><a href="#cb15-4" aria-hidden="true"></a><span class="at">    </span><span class="fu">sshEndpoint</span><span class="kw">:</span><span class="at"> </span><span class="st">&#39;Nexus&#39;</span></span>
<span id="cb15-5"><a href="#cb15-5" aria-hidden="true"></a><span class="at">    </span><span class="fu">sourceFolder</span><span class="kw">:</span><span class="at"> </span><span class="st">&#39;_site/&#39;</span></span>
<span id="cb15-6"><a href="#cb15-6" aria-hidden="true"></a><span class="at">    </span><span class="fu">contents</span><span class="kw">:</span><span class="at"> </span><span class="st">&#39;**&#39;</span></span>
<span id="cb15-7"><a href="#cb15-7" aria-hidden="true"></a><span class="at">    </span><span class="fu">targetFolder</span><span class="kw">:</span><span class="at"> </span><span class="st">&#39;/var/www/www.mrlee.dev&#39;</span></span>
<span id="cb15-8"><a href="#cb15-8" aria-hidden="true"></a><span class="at">    </span><span class="fu">cleanTargetFolder</span><span class="kw">:</span><span class="at"> </span><span class="ch">true</span></span>
<span id="cb15-9"><a href="#cb15-9" aria-hidden="true"></a><span class="at">    </span><span class="fu">readyTimeout</span><span class="kw">:</span><span class="at"> </span><span class="st">&#39;20000&#39;</span></span></code></pre></div>
<p>This is similar to running <code>rsync</code> to deploy, except that it knows where to get your private key from and where to connect to. This is defined elsewhere in Azure DevOps, through the UI, rather than in the YAML file.</p>
<p>To solve the issue I first mentioned, <code>cleanTargetFolder</code> makes sure to delete the previous deployment before copying the new one over. Problem solved!</p>
<p>To see the pipeline in full, you can check out the full YAML file<a href="#fn5" class="footnote-ref" id="fnref5" role="doc-noteref"><sup>5</sup></a> and also the public builds<a href="#fn6" class="footnote-ref" id="fnref6" role="doc-noteref"><sup>6</sup></a>. I’ve been using it with success for the past couple of weeks now.</p>
<section class="footnotes" role="doc-endnotes">
<hr />
<ol>
<li id="fn1" role="doc-endnote"><p><a href="https://docs.haskellstack.org/en/stable/README/" class="uri">https://docs.haskellstack.org/en/stable/README/</a><a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn2" role="doc-endnote"><p><a href="https://hackage.haskell.org/" class="uri">https://hackage.haskell.org/</a><a href="#fnref2" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn3" role="doc-endnote"><p><a href="https://dev.azure.com/" class="uri">https://dev.azure.com/</a><a href="#fnref3" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn4" role="doc-endnote"><p><a href="https://github.com/features/actions" class="uri">https://github.com/features/actions</a><a href="#fnref4" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn5" role="doc-endnote"><p><a href="https://github.com/mrleedev/www.mrlee.dev/blob/master/azure/pipeline.yml" class="uri">https://github.com/mrleedev/www.mrlee.dev/blob/master/azure/pipeline.yml</a><a href="#fnref5" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn6" role="doc-endnote"><p><a href="https://dev.azure.com/mrleedev/www.mrlee.dev/_build/results?buildId=115" class="uri">https://dev.azure.com/mrleedev/www.mrlee.dev/_build/results?buildId=115</a><a href="#fnref6" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>
    </section>
</article>]]></summary>
</entry>
<entry>
    <title>My favourite thing about programming</title>
    <link href="https://www.kamelasa.dev/programming/my-favourite-thing-about-programming" />
    <id>https://www.kamelasa.dev/programming/my-favourite-thing-about-programming</id>
    <published>2020-08-15T00:00:00Z</published>
    <updated>2020-08-15T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
    <header class="header inverse-video">
        <h2 class="title">My favourite thing about programming</h2>
        <span class="ert">~5 min. read</span>
    </header>

    <section>
        <p>In a word: languages.</p>
<p>A programming language is a way for man to communicate with machine just as spoken languages are a way for one person to verbally communicate with another. Of course, this is not the only way in either case: we have sign language, body language, written language, and ways of communicating that use all of the senses. In that sense, a programming language is just one way to talk to a computer, and it’s usually the way we write programs for it to execute for us. Human Interface Devices can also tell a computer what to do: a mouse controls your cursor, a keyboard controls typed instructions, and in reverse a monitor and speaker provide visual and audible feedback on your input.</p>
<p>I don’t know why I explained all of that, it’s a bit wanky, but I suppose the key word is communication.</p>
<p>I’m a fan of language in general, if such a fan can exist. I picked up a passable amount of Spanish during my time in Barcelona, learned how to read the Russian alphabet in about a weekend, and over a few years have slowly but surely learned how to properly read, write and speak the language a bit better. I find it fascinating.</p>
<p>It’s not so different with programming languages and, honestly, I think the sheer variety of ways to write a program is what keeps me interested in the field, and keeps my mind open to different ways of thinking.</p>
<p>Currently I’m playing with Haskell and also taking it a bit more seriously, to see if I can build a couple of things I can later integrate into this site. If you don’t know Haskell but have a background in PHP, Javascript, Java, or a C-like language, you might be in for a rude surprise when faced with a terse but insanely expressive syntax.</p>
<p>For example, this is the function I have for generating the estimated reading time you see at the top of every post here:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true"></a><span class="ot">ertField ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Snapshot</span> <span class="ot">-&gt;</span> <span class="dt">Context</span> <span class="dt">String</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true"></a>ertField name snapshot <span class="ot">=</span> field name <span class="op">$</span> \item <span class="ot">-&gt;</span> <span class="kw">do</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true"></a>  body <span class="ot">&lt;-</span> itemBody <span class="op">&lt;$&gt;</span> loadSnapshot (itemIdentifier item) snapshot</span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true"></a>  <span class="kw">let</span> <span class="fu">words</span> <span class="ot">=</span> <span class="fu">length</span> (T.words <span class="op">.</span> T.pack <span class="op">$</span> body)</span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true"></a>  <span class="fu">return</span> <span class="op">$</span> <span class="fu">show</span> <span class="op">$</span> <span class="fu">round</span> <span class="op">$</span> <span class="fu">words</span> <span class="op">//</span> <span class="dv">250</span></span></code></pre></div>
<p>That’s a lot of symbols doing a lot of legwork! And while this is difficult to understand for an untrained eye, it would become more familiar after understanding some of the basic ‘rules’ of Haskell and the ‘styles’ of programming you can use. Of course, you can always take it too far:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true"></a>(👏) <span class="ot">=</span> (<span class="op">$</span>)</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true"></a></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true"></a>ertField name snapshot <span class="ot">=</span> field name 👏 \item <span class="ot">-&gt;</span> <span class="kw">do</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true"></a>  body <span class="ot">&lt;-</span> itemBody <span class="op">&lt;$&gt;</span> loadSnapshot (itemIdentifier item) snapshot</span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true"></a>  <span class="kw">let</span> <span class="fu">words</span> <span class="ot">=</span> <span class="fu">length</span> (T.words <span class="op">.</span> T.pack 👏 body)</span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true"></a>  <span class="fu">return</span> 👏 <span class="fu">show</span> 👏 <span class="fu">round</span> 👏 <span class="fu">words</span> <span class="op">//</span> <span class="dv">250</span></span></code></pre></div>
<p>That should go down well with the Twitter crowd.</p>
<p>The reason I love Haskell is because it’s purely functional and that means you have to think about your problems and potential solutions in a different way. It’s a lot harder to procedurally hack things together, and it really takes you back to the fundamental concept of a function being something that takes input, acts on it, and provides output. It’s incredibly elegant.</p>
<p>Moving on, there’s Lisp. My familiarity with Lisp comes from customising my emacs setup over the past several years, and it remains my favourite way to script an editor purely because of how powerful it is. The beauty of Lisp is the simplicity of its execution: everything is a list, and working with the language is hardly any different to directly modifying an abstract syntax tree (AST). This lends itself to a different kind of expressivity because there aren’t really that many rules around the syntax, and oftentimes your lisp application can be built entirely in a REPL due to the ability to change anything at runtime.</p>
<p>With emacs in particular, it made it trivially easy for me to launch a Rails console inside a deployed Kubernetes pod.</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode commonlisp"><code class="sourceCode commonlisp"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true"></a>(<span class="kw">defun</span><span class="fu"> inf-ruby-console-k8s </span>(env)</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true"></a>  (interactive (<span class="kw">list</span> (completing-read <span class="st">&quot;Environment: &quot;</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true"></a>                                      &#39;(<span class="st">&quot;dev&quot;</span> <span class="st">&quot;staging&quot;</span> <span class="st">&quot;preprod&quot;</span>) <span class="kw">nil</span> <span class="kw">t</span>)))</span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true"></a>  (shell-command (concat <span class="st">&quot;kubectl config use-context &quot;</span> env))</span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true"></a>  (inf-ruby-console-run <span class="st">&quot;kubectl exec -it ruby-app -- rails c&quot;</span> (concat <span class="st">&quot;k8s-ruby-&quot;</span> env)))</span></code></pre></div>
<p>I mapped it to a certain keybinding and a panel would open to the side within a second, ready for me to use. I don’t think I’d have the patience to try and reproduce that in, say, VS Code, without using a task runner. Emacs itself is entirely programmable so you don’t need to worry about setting up extension boilerplate to make minor modifications.</p>
<p>I should round this post off with an even three examples, so my final two are Smalltalk and Prolog. I haven’t managed to build anything in it yet, as the learning curve is quite unlike any other. However, aspects of Smalltalk live on in languages like Ruby, where everything is an object and everything is defined in terms of message passing. I think Objective-C can be counted there too, although both languages diverge from some of Smalltalk’s ideals in the name of pragmatism. My short term goal with Smalltalk is to (attempt to) implement a raytracer as described in The Ray Tracer Challenge by James Buck<a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a>, so I can better understand the language and apply what I’ve learned elsewhere.</p>
<p>Prolog is on my list, and I keep coming back to it every couple of months to see what I’m inspired to do. I find it, and logic programming, intriguing, and I wonder how many problems would be solved a bit more easily that way compared to how we usually smush things together in procedural or OOP languages. Watch this space for more insight, I guess.</p>
<p>One thing I’ve noticed while writing this is that each language selected has little in common with the other, and they’re quite unique in terms of how they look and how they’re understood by the computer. It all ends up as machine code at the end of the day, but the solution to a single problem would be drastically different in each one. It’s not so different with more common languages like Go, PHP, Javascript, Rust, or C++, really; you might be able to pick up the syntax fairly easily if you’ve used one of those languages but you’ll still have a fun time understanding the different rules they enforce, the different constraints you have work around.</p>
<p>For as long as that remains true I think I’ll always have new toys to play with.</p>
<section class="footnotes" role="doc-endnotes">
<hr />
<ol>
<li id="fn1" role="doc-endnote"><p><a href="http://raytracerchallenge.com/" class="uri">http://raytracerchallenge.com/</a><a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>
    </section>
</article>]]></summary>
</entry>
<entry>
    <title>Celebrate each other</title>
    <link href="https://www.kamelasa.dev/personal/celebrate-each-other" />
    <id>https://www.kamelasa.dev/personal/celebrate-each-other</id>
    <published>2020-08-03T00:00:00Z</published>
    <updated>2020-08-03T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
    <header class="header inverse-video">
        <h2 class="title">Celebrate each other</h2>
        <span class="ert">~4 min. read</span>
    </header>

    <section>
        <p>Back when I worked at Typeform<a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a>, it really surprised me that they casually used a system of extrinsic motivation to reward good work, and to appreciate and recognise others. That’s a long-handed way of saying that they used a service called Bonusly<a href="#fn2" class="footnote-ref" id="fnref2" role="doc-noteref"><sup>2</sup></a> and integrated it with the company chat app, which at the time was HipChat<a href="#fn3" class="footnote-ref" id="fnref3" role="doc-noteref"><sup>3</sup></a> (hands up if you remember <em>not</em> using Slack?). We had an internal currency called Typecoin (TC)<a href="#fn4" class="footnote-ref" id="fnref4" role="doc-noteref"><sup>4</sup></a> and you had a budget of 250 a month to offer to your fellow colleagues as an extra way of saying thanks, or shouting out. Those coins actually converted to cash or Amazon gift vouchers, it was actually pretty cool. Most of the time I’d cash out, go to the Mercadona by the beach at La Vila Olimpica (which was around the corner from our office), and buy around 10€ worth of Haribo sweets for the whole office to enjoy. It was usually either a ‘ThursYAY’ or ‘TuesYAY’ depending on what mood I was in.</p>
<p>Of course, I’ve just linked recognition to financial reward. That wasn’t really the main goal of the system though, although it operated as a nice side-effect. You couldn’t gift some of your TC without connecting it to a company value and also explaining what they did to earn it, and all of this would be posted publically to a special channel in HipChat (as well as the application itself) for everyone to see. There was even a leaderboard and it was quite exciting to see who made it to the top each month (I held the record for a few months, it was a nice ego boost).</p>
<p>This started off in a small company with only 37 people in it at the time I joined, two of them being the co-founders. Almost a year later and it was a company of more than 250 people, but the system continued and, quite surprisingly, didn’t really suffer for it. Reading all of the positive messages in the public typecoin channel was truly amazing, and aside from other things we did as part of the uniquely expressive culture we had, it was one of my favourite things to catch up with. You can probably tell from my writing that I miss my time there a lot.</p>
<p>The reason I bring this up so fondly is because the act of recognition was an active one. It was hard to feel unappreciated or unloved in a place like Typeform when everyone was so open with appreciation and gratitude. I’ll let others speak for my possible role in that, but it wasn’t a thing to be ashamed of sharing the same way it can be in more repressive or corporate environments.</p>
<p>The difference is that, for the majority of my career, recognition, acknowledgement and appreciation are not typically given in such an active way. The abundance of what you provide, that they appreciate, leads to it becoming an expectation. Only when it is time for you to leave or move on does the scarcity mindset kick in and you are showered with love and support. Because they won’t be able to enjoy your presence or benefit from your skills any more.</p>
<p>Before I continue, I’m sure some people (particularly current colleagues) reading this at the time of writing will think… is Lee talking about Babylon<a href="#fn5" class="footnote-ref" id="fnref5" role="doc-noteref"><sup>5</sup></a> and why he’s leaving? Is he airing his laundry? Emphatically, I am not :) but let’s talk about Babylon anyway.</p>
<p>When I joined Babylon in early 2019, one of the first things I did after settling in was, well, ‘make a name for myself’ on Slack. Because of course, HipChat stopped being a thing in 2019. I wanted to take that positivity I experienced at Typeform, in Barcelona, and everything I’d learned and loved since, and see if something similar could happen in London. I made a gratitude channel and basically name-dropped colleagues, explaining what I appreciated through the onboarding process and the initial few weeks. Little did I know a similar scheme was being built in parallel and not long after, we got our Feel Good Fridays, which accompanied a huge list of collated messages of gratitude, recognition, and acknowledgement from one colleague to another.</p>
<p>Honestly, I live for that shit :D I love public displays of recognition because, so often, this stuff never happens until you’re gone and people miss whatever you did that made them so happy or grateful. Just a simple line of text with thank you or an explanation, along with hundreds of other similar lines meant for other people, that everybody could read through and really share in that celebration of each other, not just success.</p>
<p>And that, for me, is my key learning after all these years. ‘Celebrating success’ is such an overused and misunderstood term that you never really see it happen. Besides which, there is plenty of failure that is also worth celebration. And plenty of stuff that doesn’t fit into the bucket of success or failure that deserves celebrating too. And you can be successful <em>within</em> a failure.</p>
<p>What I’m saying in a pretty long-winded way is that we people make the success what it is, and success comes in so many diverse forms! It’s not just a project delivered on time, or a feature boosting MRR, or an uptick in retention against churn or whatever abstract work-related metric you can conjure up. It’s not just a business goal, it’s a <em>fucking plethora</em> of personal goals, desires, likes, dislikes, passions, and serendipitous interactions, all of which can mingle and mesh until you get that moment of genius, or you go home feeling happy and contented. Or whatever it is you want from life.</p>
<p>Celebrate each other, celebrate yourselves. 🥳</p>
<section class="footnotes" role="doc-endnotes">
<hr />
<ol>
<li id="fn1" role="doc-endnote"><p><a href="https://www.typeform.com/" class="uri">https://www.typeform.com/</a><a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn2" role="doc-endnote"><p><a href="https://bonus.ly/" class="uri">https://bonus.ly/</a><a href="#fnref2" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn3" role="doc-endnote"><p><a href="https://en.wikipedia.org/wiki/HipChat" class="uri">https://en.wikipedia.org/wiki/HipChat</a><a href="#fnref3" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn4" role="doc-endnote"><p><a href="https://www.mrlee.dev/images/tc.jpg" class="uri">https://www.mrlee.dev/images/tc.jpg</a><a href="#fnref4" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn5" role="doc-endnote"><p><a href="https://www.babylonhealth.com/" class="uri">https://www.babylonhealth.com/</a><a href="#fnref5" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>
    </section>
</article>]]></summary>
</entry>
<entry>
    <title>A damn good listen</title>
    <link href="https://www.kamelasa.dev/personal/a-damn-good-listen" />
    <id>https://www.kamelasa.dev/personal/a-damn-good-listen</id>
    <published>2020-08-01T00:00:00Z</published>
    <updated>2020-08-01T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
    <header class="header inverse-video">
        <h2 class="title">A damn good listen</h2>
        <span class="ert">~3 min. read</span>
    </header>

    <section>
        <p>A couple of years ago I enrolled in a coaching course with Coaching Development<a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a>. It cost a fair whack and, even though I was unable to complete the course due to the severe decline in my mental health at the time, I still maintain that it’s the best money I’ve ever spent, and what I learned has stuck with me and essentially guided me towards a different path through life that I would otherwise never have taken. The lack of credential means I can’t practice as a coach, but the skills acquired are a great benefit to any communication driven profession, especially ones where conflict can easily brew up.</p>
<p>Out of all of the things I picked up during those five months, one of a few quotes still stands out with me:</p>
<blockquote>
<p>Sometimes all somebody needs is a damn good listening to</p>
<p><em>Colin Brett, 2018</em></p>
</blockquote>
<p>To be fair, the first thing I think of whenever I hear “damn good” anything is Special Agent Dale Cooper ordering a cherry pie and a coffee. But I hold Twin Peaks close to my heart; you won’t find any other television like it.</p>
<p>Seriously though, I’m the sort of person who genuinely enjoys hearing people out. There are so many ways we as human beings can connect on this mortal coil–we can do it romantically, sexually, as friends or confidantes–and while I’m as fond of romance and carnal pleasures as anyone else is, there are few things more satisfying, more fulfilling, than a damn good listening session. It’s essentially a meditation, except that you’re clearing your mind of thoughts so that you can make space to to allow the other person’s thoughts and feelings in, judgment free.</p>
<p>So many problems we have as individual people exist and grow out of proportion because the space or audience required to express those feelings was never up for offer. Raw emotions are dismissed, ignored, and twisted away from their original intent all the time, and all that arises from it is frustration, resentment, and in the worst case, the realisation of emotional abuse.</p>
<p>For example, I was first diagnosed as clinically depressed back in 2010 after breaking up with my ex-girlfriend at the time. I lost her, and the dog who’d been with me for most of my <em>entire life</em>, since I was maybe 2 years old, died at the age of 21. That’s crazy for a dog, but the loss hurt like nothing else. And my grandad died and I dropped out of uni just before the final exams. But really my dog Suki welcoming the afterlife was the straw that broke the camel’s back. My mum understood, and she came to the doctor with me for emotional support. My dad, upon hearing about it, made it all about himself. Told me I’m living a shit life, it’s always been shit, and he should have done more to make it not shit.</p>
<p>He wasn’t listening at all, he just took my extreme vulnerability and swapped it in for his own so he could go on about being a bad father. I must have spent more time listening to him and reassuring him, as if I just announced I had late stage cancer and had a few months to live.</p>
<p>The problem, if you haven’t noticed it already, is that kind of approach only serves to push someone away. Why would you share your most intimate feelings or secrets with someone if all they will do is turn it into a problem of their own? As if everything is about them and not about you?</p>
<p>To bring it back to now: the beauty of listening, the sheer magnificence of it, is that it helps build a truly priceless amount of trust and depth in your connection to the person sharing with you. It takes a lot to hear someone out without interjecting, but it also means a lot to receive it when you want to share too. Compassion and empathy are in short supply in general, yet they are ultimately powerful and transformative when offered.</p>
<p>To wrap this up; sometimes the best, most enlightening conversations are the ones where you don’t say anything.</p>
<section class="footnotes" role="doc-endnotes">
<hr />
<ol>
<li id="fn1" role="doc-endnote"><p><a href="https://coachingdevelopment.com/" class="uri">https://coachingdevelopment.com/</a><a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>
    </section>
</article>]]></summary>
</entry>
<entry>
    <title>Do you really need those microservices?</title>
    <link href="https://www.kamelasa.dev/programming/do-you-really-need-those-microservices" />
    <id>https://www.kamelasa.dev/programming/do-you-really-need-those-microservices</id>
    <published>2020-07-21T00:00:00Z</published>
    <updated>2020-07-21T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
    <header class="header inverse-video">
        <h2 class="title">Do you really need those microservices?</h2>
        <span class="ert">~4 min. read</span>
    </header>

    <section>
        <p>I’ve been through half a dozen rounds of interviewing over the past couple of months, with different companies. Naturally, when you say you’ve had experience working with microservices, you’re practically begging the question. What do you think about them?</p>
<p>I’m not really for-or-against them, and in fact I find it a little strange and frustrating when it’s expected that you take a side in favour of having a nuanced opinion. The idea of being pro-microservice and anti-monolith, for example, is utterly absurd. It’s never really voiced that way, but it’s often easy to detect the absolutist stance masquerading as a balanced opinion. Even the title of this post falls victim to that, as the question presented is quite clearly loaded.</p>
<p>Anyway, I love being asked this question because after a good five years of working with distributed systems orchestrated by Kubernetes, almost entirely in the form of ‘migrating away from the monolith’, I’ve had plenty of time to formulate and adapt my thinking around it.</p>
<p>First and foremost, I believe the main benefit of a business switching to microservices is the manifestation of Conway’s Law<a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a> in practice. Prior to making the switch in architecture, the business most likely decided on an organisational structure that exchanges large, difficult to manage teams for a distributed collection of smaller, self-sufficient, self-empowered teams. More often than not these follow a squad and chapter model, otherwise reduced to ‘the Spotify model’, and a hierarchy of cross-functional teams is established. Once that structure is put in place and people are shuffled around a bit, the question of ownership in a mixed-responsibility, mixed-domain codebase becomes apparent. Microservices are thus the solution to a perceived conflict between squads and they shift a lot of that conflict from the teams themselves, to the channels in-between them.</p>
<p>Under no circumstance is the technical implication of such a change considered, particularly in older codebases for which this change would introduce a significant level of disruption. The organisational benefits of distributing teams and workload are substantial, but the drawbacks of distributing <em>code</em> are similarly worthy of consideration too, and it often becomes a gateway to extra complexity as once-simple tasks find themselves spread apart over various network calls and machines.</p>
<p>I don’t consider this a dealbreaker, but in my experience I’ve always felt like there’s a step missing between the singular, monolithic codebase and the highly distributed microservice architecture. There’s a hell of a lot you can do in that singular codebase, in terms of taking smaller steps towards a service-oriented architecture, or a domain-driven one.</p>
<p>In those situations, you are investing primarily in the work required to understand the different domains in your codebase and how they speak to each other, with much lower risk than fundamentally changing your infrastructure as well as your architecture. In Ruby, you can abstract code into gems and provide solid, public APIs that other parts of the code can use. In Java you have modules and packages. Every language you care to use has the concept of packaging code into bundles or libraries that can be shared as a dependency.</p>
<p>Adopting this workflow introduces much lower risk because, in the event of failure, you can easily adjust your expectations around the domains and how they communicate and fix them in a singular release. It may not be perfect, but if you refactor enough of your code in SOA<a href="#fn2" class="footnote-ref" id="fnref2" role="doc-noteref"><sup>2</sup></a>/DDD<a href="#fn3" class="footnote-ref" id="fnref3" role="doc-noteref"><sup>3</sup></a> style then you’ll have a much easier time turning those domains into proper microservices further down the line.</p>
<p>This is where a microservice architecture truly shines. If you have clear, well bounded domains, and you’ve developed solid API contracts as well as standards for versioning, logging, etc to allow for centralised aggregation of useful resources (for debugging or auditing, for example), and if the team in charge of the domain can essentially treat that service as a full-blown product with documentation, support, and its own priorities and backlog, then that is where the power of that infrastructure comes into play.</p>
<p>Another amazing usecase for this architecture is when you have strong regulatory requirements to sequester and protect personally identifying information. This could involve PCI compliance as a financial business, HIPAA as an American medical firm, or GDPR for a whole host of privacy concerns across the EU and the UK. Network access can be controlled much more easily than different modules or functions in your singular codebase, and the risk of a low-importance feature being compromised to access the critical resources in that case is far too high.</p>
<p>I believe that’s a lot easier to do when you start early, but if you come to it late then you fall into an easy trap: how do you migrate your stuff into new services while also maintaining your existing codebase, along with all the features that you’re still expected to deliver? You can’t stop the world to rewrite all of the code, so there’s a possibility that you enter a refactoring spiral as your service plays cat and mouse with the monolith. This is infinitely more difficult when migrating a codebase written in a dynamic language, as automated refactoring is nowhere near as easy without a solid type-system to back it up.</p>
<p>If I was to offer anybody advice about how to make all of this happen successfully, I’d say to stop thinking in terms of the existing monolith, and instead look at what individual products you could separate or extract, or even spin-off into their own businesses if the idea was unique enough to sell individually. And don’t jump to solutions like Kubernetes until you’re dealing with enough of these services that your existing deployment setup is too hard to manage.</p>
<section class="footnotes" role="doc-endnotes">
<hr />
<ol>
<li id="fn1" role="doc-endnote"><p><a href="https://en.wikipedia.org/wiki/Conway%27s_law" class="uri">https://en.wikipedia.org/wiki/Conway%27s_law</a><a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn2" role="doc-endnote"><p><a href="https://en.wikipedia.org/wiki/Service-oriented_architecture" class="uri">https://en.wikipedia.org/wiki/Service-oriented_architecture</a><a href="#fnref2" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn3" role="doc-endnote"><p><a href="https://en.wikipedia.org/wiki/Domain-driven_design" class="uri">https://en.wikipedia.org/wiki/Domain-driven_design</a><a href="#fnref3" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>
    </section>
</article>]]></summary>
</entry>

</feed>
